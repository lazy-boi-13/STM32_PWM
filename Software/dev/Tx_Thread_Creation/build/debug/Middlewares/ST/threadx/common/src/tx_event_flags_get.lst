ARM GAS  /tmp/ccSnMjov.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"tx_event_flags_get.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Middlewares/ST/threadx/common/src/tx_event_flags_get.c"
  19              		.section	.text._tx_event_flags_get,"ax",%progbits
  20              		.align	1
  21              		.global	_tx_event_flags_get
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_tx_event_flags_get:
  27              	.LVL0:
  28              	.LFB8:
   1:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
   2:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
   3:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
   5:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  10:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  11:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  12:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  13:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  14:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  15:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**                                                                       */
  16:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**                                                                       */
  18:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**   Event Flags                                                         */
  19:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**                                                                       */
  20:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  21:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  22:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  23:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #define TX_SOURCE_CODE
  24:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  25:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  26:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /* Include necessary system files.  */
  27:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  28:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #include "tx_api.h"
  29:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #include "tx_trace.h"
  30:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #include "tx_thread.h"
ARM GAS  /tmp/ccSnMjov.s 			page 2


  31:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #include "tx_event_flags.h"
  32:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  33:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  34:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  35:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  36:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  FUNCTION                                               RELEASE        */
  37:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  38:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    _tx_event_flags_get                                 PORTABLE C      */
  39:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                           6.2.0        */
  40:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  AUTHOR                                                                */
  41:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  42:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  44:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  DESCRIPTION                                                           */
  45:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  46:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    This function gets the specified event flags from the group,        */
  47:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    according to the get option.  The get option also specifies whether */
  48:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    or not the retrieved flags are cleared.                             */
  49:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  50:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  INPUT                                                                 */
  51:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  52:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    group_ptr                         Pointer to group control block    */
  53:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    requested_event_flags             Event flags requested             */
  54:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    get_option                        Specifies and/or and clear options*/
  55:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    actual_flags_ptr                  Pointer to place the actual flags */
  56:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                        the service retrieved           */
  57:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    wait_option                       Suspension option                 */
  58:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  59:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  OUTPUT                                                                */
  60:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  61:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    status                            Completion status                 */
  62:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  63:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  CALLS                                                                 */
  64:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  65:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    _tx_thread_system_suspend         Suspend thread service            */
  66:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    _tx_thread_system_ni_suspend      Non-interruptable suspend thread  */
  67:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  68:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  CALLED BY                                                             */
  69:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  70:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    Application Code                                                    */
  71:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  72:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  RELEASE HISTORY                                                       */
  73:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  74:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*    DATE              NAME                      DESCRIPTION             */
  75:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  76:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  05-19-2020      William E. Lamie        Initial Version 6.0           */
  77:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  09-30-2020      Yuxin Zhou              Modified comment(s),          */
  78:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                            resulting in version 6.1    */
  79:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  04-25-2022      Scott Larson            Modified comment(s),          */
  80:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                            handle 0 flags case,        */
  81:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                            resulting in version 6.1.11 */
  82:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*  10-31-2022      Scott Larson            Modified comment(s), always   */
  83:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                            return actual flags,        */
  84:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                            resulting in version 6.2.0  */
  85:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /*                                                                        */
  86:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** /**************************************************************************/
  87:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
ARM GAS  /tmp/ccSnMjov.s 			page 3


  88:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
  89:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** {
  29              		.loc 1 89 1 view -0
  30              		.cfi_startproc
  31              		@ args = 4, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 89 1 is_stmt 0 view .LVU1
  34 0000 70B5     		push	{r4, r5, r6, lr}
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 0446     		mov	r4, r0
  90:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  91:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** TX_INTERRUPT_SAVE_AREA
  41              		.loc 1 91 1 is_stmt 1 view .LVU2
  92:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
  93:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** UINT            status;
  42              		.loc 1 93 1 view .LVU3
  94:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** UINT            and_request;
  43              		.loc 1 94 1 view .LVU4
  95:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** UINT            clear_request;
  44              		.loc 1 95 1 view .LVU5
  96:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** ULONG           current_flags;
  45              		.loc 1 96 1 view .LVU6
  97:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** ULONG           flags_satisfied;
  46              		.loc 1 97 1 view .LVU7
  98:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifndef TX_NOT_INTERRUPTABLE
  99:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** ULONG           delayed_clear_flags;
  47              		.loc 1 99 1 view .LVU8
 100:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
 101:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** UINT            suspended_count;
  48              		.loc 1 101 1 view .LVU9
 102:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** TX_THREAD       *thread_ptr;
  49              		.loc 1 102 1 view .LVU10
 103:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** TX_THREAD       *next_thread;
  50              		.loc 1 103 1 view .LVU11
 104:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** TX_THREAD       *previous_thread;
  51              		.loc 1 104 1 view .LVU12
 105:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifndef TX_NOT_INTERRUPTABLE
 106:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** UINT            interrupted_set_request;
  52              		.loc 1 106 1 view .LVU13
 107:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
 108:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 109:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 110:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Disable interrupts to examine the event flags group.  */
 111:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     TX_DISABLE
  53              		.loc 1 111 5 view .LVU14
  54              	.LBB16:
  55              	.LBI16:
  56              		.file 2 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h"
   1:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
   2:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   3:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   5:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
ARM GAS  /tmp/ccSnMjov.s 			page 4


   6:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  10:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  11:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  12:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  13:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  14:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  15:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  16:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  18:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  20:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  21:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  22:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  23:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  24:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  25:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  26:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  28:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M7/GNU     */
  29:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                           6.1.12       */
  30:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  31:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  33:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  35:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  37:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  46:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  49:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  51:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  53:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  04-25-2022      Scott Larson            Modified comments and added   */
  60:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            volatile to registers,      */
  61:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.11 */
  62:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  07-29-2022      Scott Larson            Modified comments and         */
ARM GAS  /tmp/ccSnMjov.s 			page 5


  63:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            described BASEPRI usage,    */
  64:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.12 */
  65:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  66:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  67:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  68:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  69:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_H
  70:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  71:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  72:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  73:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  74:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  75:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  76:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  77:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  78:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  79:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_user.h"
  80:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  81:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  82:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  83:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  84:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  85:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <stdlib.h>
  86:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <string.h>
  87:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  88:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  89:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  90:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  91:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  92:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <yvals.h>
  93:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  94:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  95:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  96:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
  97:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  98:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  99:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 100:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 101:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 102:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
 103:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
 104:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
 105:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 106:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 107:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef __GNUC__
 108:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 109:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 110:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 111:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 112:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 113:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define VOID                                    void
 114:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 115:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 116:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef int                                     INT;
 117:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 118:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef long                                    LONG;
 119:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
ARM GAS  /tmp/ccSnMjov.s 			page 6


 120:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 121:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 122:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 123:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 124:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 125:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 126:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 127:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 128:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 129:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 130:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 131:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 132:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 133:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 134:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 135:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 136:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 137:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 138:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 139:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 140:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 141:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 142:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 143:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 144:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 145:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 146:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 147:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 148:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 149:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 150:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 151:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 152:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* By default, ThreadX for Cortex-M uses the PRIMASK register to enable/disable interrupts.
 153:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** If using BASEPRI is desired, define the following two symbols for both c and assembly files:
 154:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_USE_BASEPRI - This tells ThreadX to use BASEPRI instead of PRIMASK.
 155:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_BASEPRI = (priority_mask << (8 - number_priority_bits)) - this defines the maximum priority
 156:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** Any interrupt with a higher priority than priority_mask will not be masked, thus the interrupt will
 157:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 158:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 159:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 160:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 161:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 162:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 163:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 164:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 165:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 166:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 167:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    source constants would be:
 168:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 169:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0x0a800024)
 170:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 171:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 172:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 173:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 174:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 175:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 176:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0xE0001004)
ARM GAS  /tmp/ccSnMjov.s 			page 7


 177:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 178:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 179:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 180:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 181:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 182:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 183:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 184:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 185:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 186:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 187:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
 188:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 189:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 190:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 191:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 192:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 193:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 194:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 195:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 196:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 197:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 198:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 199:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 200:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 201:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 202:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 203:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 204:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 205:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 206:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 207:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 208:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 209:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 210:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    a function call.  */
 211:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 212:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 213:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 214:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 215:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 216:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 217:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 218:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 219:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 220:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 221:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 222:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 223:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    logic.  */
 224:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 225:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 226:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 227:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 228:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 229:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 230:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 231:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 232:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 233:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
ARM GAS  /tmp/ccSnMjov.s 			page 8


 234:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 235:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 236:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 237:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 238:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 239:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 240:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 241:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 242:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 243:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 244:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 245:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 246:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 247:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 248:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 249:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 250:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 251:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 252:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 253:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 254:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 255:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 256:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 257:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 258:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 259:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 260:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 261:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 262:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 263:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 264:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 265:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 266:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 267:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 268:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 269:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 270:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 271:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 272:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 273:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 274:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 275:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 276:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 277:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 278:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 279:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 280:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 281:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 282:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 283:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 284:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 285:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 286:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 287:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 288:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 289:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 290:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
ARM GAS  /tmp/ccSnMjov.s 			page 9


 291:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 292:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 293:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 294:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 295:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 296:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 297:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 298:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 299:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 300:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 301:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 302:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 303:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 304:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 305:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 306:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 307:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 308:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 309:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 310:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 311:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 312:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 313:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 314:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 315:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 316:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 317:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 318:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 319:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 320:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 321:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 322:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 323:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 324:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 325:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 326:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 327:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 328:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 329:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 330:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 331:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 332:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 333:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 334:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 335:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 336:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 337:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 338:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 339:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 340:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 341:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 342:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 343:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 344:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 345:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 346:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 347:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccSnMjov.s 			page 10


 348:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 349:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 350:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 351:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 352:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 353:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 354:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 355:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 356:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 357:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 358:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 359:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 360:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 361:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 362:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 363:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 364:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 365:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 366:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 367:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 368:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 369:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 370:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 371:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 372:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 373:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 374:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 375:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 376:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 377:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 378:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 379:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 380:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 381:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 382:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 383:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 384:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 385:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 386:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 387:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 388:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 389:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 390:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 391:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 392:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 393:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((volatile ULONG *) 0xE00
 394:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 395:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 396:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 397:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 398:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 399:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 400:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 401:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 402:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 403:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 404:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
ARM GAS  /tmp/ccSnMjov.s 			page 11


 405:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 406:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 407:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 408:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 409:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 410:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 411:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 412:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 413:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 414:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 415:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 416:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 417:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 418:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 419:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 420:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 421:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 422:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 423:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 424:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 425:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 426:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 427:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 428:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 429:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 430:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 431:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 432:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 433:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 434:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 435:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 436:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 437:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 438:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 439:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 440:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 441:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 442:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 443:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 444:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 445:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 446:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 447:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 448:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 449:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 450:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 451:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 452:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 453:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 454:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 455:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 456:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 457:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 458:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 459:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 460:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 461:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccSnMjov.s 			page 12


 462:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 463:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 464:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 465:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 466:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 467:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 468:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 469:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 470:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 471:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 472:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 473:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 474:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 475:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 476:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 477:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 478:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 479:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 480:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 481:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 482:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 483:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 484:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 485:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 486:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 487:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 488:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 489:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 490:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(ipsr_value);
 491:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 492:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 493:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 494:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 495:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 496:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 497:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 498:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 499:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 500:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 501:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 502:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 503:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 504:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 505:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 506:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 507:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 508:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 509:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 510:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 511:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 512:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 513:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 514:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 515:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 516:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 517:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 518:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
ARM GAS  /tmp/ccSnMjov.s 			page 13


 519:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 520:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 521:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 522:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 523:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 524:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 525:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 526:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 527:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 528:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 529:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 530:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 531:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 532:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 533:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 534:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 535:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 536:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 537:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 538:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 539:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 540:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 541:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 542:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 543:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 544:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 546:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int posture;
 548:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 549:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 550:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 552:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(posture);
 554:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 555:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 556:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 557:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 558:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 559:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 560:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 561:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 562:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 563:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 564:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 565:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 566:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 567:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 569:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 570:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 571:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 572:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 573:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 575:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccSnMjov.s 			page 14


 576:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 577:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  57              		.loc 2 578 63 view .LVU15
  58              	.LBB17:
 579:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int int_posture;
  59              		.loc 2 580 1 view .LVU16
 581:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  60              		.loc 2 582 5 view .LVU17
  61              	.LBB18:
  62              	.LBI18:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
  63              		.loc 2 545 63 view .LVU18
  64              	.LBB19:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  65              		.loc 2 547 1 view .LVU19
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  66              		.loc 2 551 5 view .LVU20
  67              		.syntax unified
  68              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  69 0004 EFF3108C 		MRS  ip, PRIMASK 
  70              	@ 0 "" 2
  71              	.LVL1:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  72              		.loc 2 553 5 view .LVU21
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  73              		.loc 2 553 5 is_stmt 0 view .LVU22
  74              		.thumb
  75              		.syntax unified
  76              	.LBE19:
  77              	.LBE18:
 583:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 584:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 585:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 586:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  78              		.loc 2 587 5 is_stmt 1 view .LVU23
  79              		.syntax unified
  80              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  81 0008 72B6     		CPSID i
  82              	@ 0 "" 2
 588:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 589:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(int_posture);
  83              		.loc 2 589 5 view .LVU24
  84              	.LVL2:
  85              		.loc 2 589 5 is_stmt 0 view .LVU25
  86              		.thumb
  87              		.syntax unified
  88              	.LBE17:
  89              	.LBE16:
 112:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 113:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifdef TX_EVENT_FLAGS_ENABLE_PERFORMANCE_INFO
 114:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 115:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Increment the total event flags get counter.  */
 116:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     _tx_event_flags_performance_get_count++;
ARM GAS  /tmp/ccSnMjov.s 			page 15


 117:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 118:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Increment the number of event flags gets on this semaphore.  */
 119:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     group_ptr -> tx_event_flags_group__performance_get_count++;
 120:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
 121:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 122:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 123:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_EVENT_FLAGS_GET, group_ptr, requested_flags, group_ptr -> tx_e
 124:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 125:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Log this kernel call.  */
 126:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     TX_EL_EVENT_FLAGS_GET_INSERT
 127:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 128:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Pickup current flags.  */
 129:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     current_flags =  group_ptr -> tx_event_flags_group_current;
  90              		.loc 1 129 5 is_stmt 1 view .LVU26
  91              		.loc 1 129 19 is_stmt 0 view .LVU27
  92 000a 8068     		ldr	r0, [r0, #8]
  93              	.LVL3:
 130:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 131:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Return the actual event flags and apply delayed clearing.  */
 132:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
  94              		.loc 1 132 5 is_stmt 1 view .LVU28
  95              		.loc 1 132 53 is_stmt 0 view .LVU29
  96 000c 256A     		ldr	r5, [r4, #32]
  97              		.loc 1 132 40 view .LVU30
  98 000e 20EA0505 		bic	r5, r0, r5
  99              		.loc 1 132 23 view .LVU31
 100 0012 1D60     		str	r5, [r3]
 133:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 134:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Apply the event flag option mask.  */
 135:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     and_request =  (get_option & TX_AND);
 101              		.loc 1 135 5 is_stmt 1 view .LVU32
 102              		.loc 1 135 17 is_stmt 0 view .LVU33
 103 0014 02F00206 		and	r6, r2, #2
 104              	.LVL4:
 136:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 137:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifdef TX_NOT_INTERRUPTABLE
 138:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 139:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Check for AND condition. All flags must be present to satisfy request.  */
 140:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     if (and_request == TX_AND)
 141:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 142:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 143:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* AND request is present.  */
 144:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 145:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Calculate the flags present.  */
 146:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         flags_satisfied =  (current_flags & requested_flags);
 147:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 148:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Determine if they satisfy the AND request.  */
 149:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         if (flags_satisfied != requested_flags)
 150:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 151:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 152:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* No, not all the requested flags are present. Clear the flags present variable.  */
 153:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             flags_satisfied =  ((ULONG) 0);
 154:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 155:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 156:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     else
 157:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 158:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
ARM GAS  /tmp/ccSnMjov.s 			page 16


 159:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* OR request is present. Simply or the requested flags and the current flags.  */
 160:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         flags_satisfied =  (current_flags & requested_flags);
 161:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 162:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 163:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Determine if the request is satisfied.  */
 164:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     if (flags_satisfied != ((ULONG) 0))
 165:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 166:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 167:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Pickup the clear bit.  */
 168:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 169:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 170:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Determine whether or not clearing needs to take place.  */
 171:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         if (clear_request == TX_TRUE)
 172:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 173:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 174:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****              /* Yes, clear the flags that satisfied this request.  */
 175:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****              group_ptr -> tx_event_flags_group_current =
 176:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_current & (~requested_fla
 177:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 178:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 179:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Return success.  */
 180:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         status =  TX_SUCCESS;
 181:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 182:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 183:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #else
 184:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 185:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Pickup delayed clear flags.  */
 186:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 105              		.loc 1 186 5 is_stmt 1 view .LVU34
 106              		.loc 1 186 25 is_stmt 0 view .LVU35
 107 0018 256A     		ldr	r5, [r4, #32]
 108              	.LVL5:
 187:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 188:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Determine if there are any delayed clear operations pending.  */
 189:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     if (delayed_clear_flags != ((ULONG) 0))
 109              		.loc 1 189 5 is_stmt 1 view .LVU36
 110              		.loc 1 189 8 is_stmt 0 view .LVU37
 111 001a 0DB1     		cbz	r5, .L2
 190:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 191:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 192:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Yes, apply them to the current flags.  */
 193:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         current_flags =  current_flags & (~delayed_clear_flags);
 112              		.loc 1 193 9 is_stmt 1 view .LVU38
 113              		.loc 1 193 23 is_stmt 0 view .LVU39
 114 001c 20EA0500 		bic	r0, r0, r5
 115              	.LVL6:
 116              	.L2:
 194:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 195:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 196:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Check for AND condition. All flags must be present to satisfy request.  */
 197:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     if (and_request == TX_AND)
 117              		.loc 1 197 5 is_stmt 1 view .LVU40
 118              		.loc 1 197 8 is_stmt 0 view .LVU41
 119 0020 002E     		cmp	r6, #0
 120 0022 39D0     		beq	.L3
 198:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 199:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
ARM GAS  /tmp/ccSnMjov.s 			page 17


 200:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* AND request is present.  */
 201:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 202:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Calculate the flags present.  */
 203:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         flags_satisfied =  (current_flags & requested_flags);
 121              		.loc 1 203 9 is_stmt 1 view .LVU42
 122              		.loc 1 203 25 is_stmt 0 view .LVU43
 123 0024 00EA0106 		and	r6, r0, r1
 124              	.LVL7:
 204:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 205:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Determine if they satisfy the AND request.  */
 206:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         if (flags_satisfied != requested_flags)
 125              		.loc 1 206 9 is_stmt 1 view .LVU44
 126              		.loc 1 206 12 is_stmt 0 view .LVU45
 127 0028 31EA0000 		bics	r0, r1, r0
 128              	.LVL8:
 129              		.loc 1 206 12 view .LVU46
 130 002c 36D0     		beq	.L5
 131              	.L4:
 132              	.LVL9:
 207:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 208:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 209:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* No, not all the requested flags are present. Clear the flags present variable.  */
 210:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             flags_satisfied =  ((ULONG) 0);
 211:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 212:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 213:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     else
 214:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 215:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 216:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* OR request is present. Simply AND together the requested flags and the current flags
 217:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****            to see if any are present.  */
 218:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         flags_satisfied =  (current_flags & requested_flags);
 219:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 220:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 221:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Determine if the request is satisfied.  */
 222:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     if (flags_satisfied != ((ULONG) 0))
 223:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 224:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 225:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Yes, this request can be handled immediately.  */
 226:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 227:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Pickup the clear bit.  */
 228:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 229:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 230:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Determine whether or not clearing needs to take place.  */
 231:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         if (clear_request == TX_TRUE)
 232:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 233:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 234:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* Set interrupted set request flag to false.  */
 235:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             interrupted_set_request =  TX_FALSE;
 236:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 237:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* Determine if the suspension list is being processed by an interrupted
 238:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                set request.  */
 239:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 240:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 241:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 242:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 243:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 {
 244:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
ARM GAS  /tmp/ccSnMjov.s 			page 18


 245:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     /* Set the interrupted set request flag.  */
 246:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     interrupted_set_request =  TX_TRUE;
 247:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 }
 248:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 249:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 250:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* Was a set request interrupted?  */
 251:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             if (interrupted_set_request == TX_TRUE)
 252:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 253:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 254:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* A previous set operation is was interrupted, we need to defer the
 255:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                    event clearing until the set operation is complete.  */
 256:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 257:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Remember the events to clear.  */
 258:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 group_ptr -> tx_event_flags_group_delayed_clear =
 259:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_delayed_clear | requested
 260:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 261:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             else
 262:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 263:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 264:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Yes, clear the flags that satisfied this request.  */
 265:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 group_ptr -> tx_event_flags_group_current =
 266:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_current & ~requested_flag
 267:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 268:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 269:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 270:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Set status to success.  */
 271:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         status =  TX_SUCCESS;
 272:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 273:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 274:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
 275:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     else
 276:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 277:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* flags_satisfied is 0.  */
 278:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         /* Determine if the request specifies suspension.  */
 279:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         if (wait_option != TX_NO_WAIT)
 133              		.loc 1 279 9 is_stmt 1 view .LVU47
 134              		.loc 1 279 12 is_stmt 0 view .LVU48
 135 002e 0498     		ldr	r0, [sp, #16]
 136 0030 0028     		cmp	r0, #0
 137 0032 4DD0     		beq	.L10
 280:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 281:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 282:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
 283:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 138              		.loc 1 283 13 is_stmt 1 view .LVU49
 139              		.loc 1 283 45 is_stmt 0 view .LVU50
 140 0034 2A48     		ldr	r0, .L15
 141 0036 0068     		ldr	r0, [r0]
 142              		.loc 1 283 16 view .LVU51
 143 0038 0028     		cmp	r0, #0
 144 003a 4DD1     		bne	.L11
 145              		.loc 1 283 60 discriminator 1 view .LVU52
 146 003c 0029     		cmp	r1, #0
 147 003e 4DD0     		beq	.L12
 284:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 285:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 286:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
ARM GAS  /tmp/ccSnMjov.s 			page 19


 287:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                    or if requested_flags is 0, return error completion.  */
 288:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 status =  TX_NO_EVENTS;
 289:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 290:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             else
 291:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 292:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 293:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Prepare for suspension of this thread.  */
 294:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 295:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifdef TX_EVENT_FLAGS_ENABLE_PERFORMANCE_INFO
 296:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 297:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Increment the total event flags suspensions counter.  */
 298:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 _tx_event_flags_performance_suspension_count++;
 299:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 300:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Increment the number of event flags suspensions on this semaphore.  */
 301:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 group_ptr -> tx_event_flags_group___performance_suspension_count++;
 302:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
 303:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 304:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Pickup thread pointer.  */
 305:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 TX_THREAD_GET_CURRENT(thread_ptr)
 148              		.loc 1 305 17 is_stmt 1 view .LVU53
 149 0040 2848     		ldr	r0, .L15+4
 150 0042 0568     		ldr	r5, [r0]
 151              	.LVL10:
 306:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 307:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Setup cleanup routine pointer.  */
 308:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 152              		.loc 1 308 17 view .LVU54
 153              		.loc 1 308 57 is_stmt 0 view .LVU55
 154 0044 2848     		ldr	r0, .L15+8
 155 0046 A866     		str	r0, [r5, #104]
 156              	.LVL11:
 309:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 310:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Remember which event flags we are looking for.  */
 311:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspend_info =  requested_flags;
 157              		.loc 1 311 17 is_stmt 1 view .LVU56
 158              		.loc 1 311 54 is_stmt 0 view .LVU57
 159 0048 A967     		str	r1, [r5, #120]
 312:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 313:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Save the get option as well.  */
 314:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspend_option =  get_option;
 160              		.loc 1 314 17 is_stmt 1 view .LVU58
 161              		.loc 1 314 56 is_stmt 0 view .LVU59
 162 004a C5F88020 		str	r2, [r5, #128]
 315:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 316:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Save the destination for the current events.  */
 317:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 163              		.loc 1 317 17 is_stmt 1 view .LVU60
 164              		.loc 1 317 65 is_stmt 0 view .LVU61
 165 004e EB67     		str	r3, [r5, #124]
 318:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 319:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Setup cleanup information, i.e. this event flags group control
 320:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                    block.  */
 321:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 166              		.loc 1 321 17 is_stmt 1 view .LVU62
 167              		.loc 1 321 63 is_stmt 0 view .LVU63
 168 0050 EC66     		str	r4, [r5, #108]
 322:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
ARM GAS  /tmp/ccSnMjov.s 			page 20


 323:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifndef TX_NOT_INTERRUPTABLE
 324:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 325:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Increment the suspension sequence number, which is used to identify
 326:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                    this suspension event.  */
 327:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspension_sequence++;
 169              		.loc 1 327 17 is_stmt 1 view .LVU64
 170              		.loc 1 327 28 is_stmt 0 view .LVU65
 171 0052 D5F8AC30 		ldr	r3, [r5, #172]
 172              	.LVL12:
 173              		.loc 1 327 60 view .LVU66
 174 0056 0133     		adds	r3, r3, #1
 175 0058 C5F8AC30 		str	r3, [r5, #172]
 328:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
 329:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 330:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Pickup the suspended count.  */
 331:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 176              		.loc 1 331 17 is_stmt 1 view .LVU67
 177              		.loc 1 331 33 is_stmt 0 view .LVU68
 178 005c 6369     		ldr	r3, [r4, #20]
 179              	.LVL13:
 332:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 333:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Setup suspension list.  */
 334:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 if (suspended_count == TX_NO_SUSPENSIONS)
 180              		.loc 1 334 17 is_stmt 1 view .LVU69
 181              		.loc 1 334 20 is_stmt 0 view .LVU70
 182 005e 002B     		cmp	r3, #0
 183 0060 2FD1     		bne	.L8
 335:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 {
 336:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 337:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     /* No other threads are suspended.  Setup the head pointer and
 338:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                        just setup this threads pointers to itself.  */
 339:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 184              		.loc 1 339 21 is_stmt 1 view .LVU71
 185              		.loc 1 339 71 is_stmt 0 view .LVU72
 186 0062 2561     		str	r5, [r4, #16]
 187              	.LVL14:
 340:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 188              		.loc 1 340 21 is_stmt 1 view .LVU73
 189              		.loc 1 340 60 is_stmt 0 view .LVU74
 190 0064 2D67     		str	r5, [r5, #112]
 341:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 191              		.loc 1 341 21 is_stmt 1 view .LVU75
 192              		.loc 1 341 64 is_stmt 0 view .LVU76
 193 0066 6D67     		str	r5, [r5, #116]
 194              	.LVL15:
 195              	.L9:
 342:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 }
 343:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 else
 344:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 {
 345:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 346:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     /* This list is not NULL, add current thread to the end. */
 347:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     next_thread =                                   group_ptr -> tx_event_flags_gro
 348:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 349:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
 350:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 351:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 352:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
ARM GAS  /tmp/ccSnMjov.s 			page 21


 353:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 }
 354:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 355:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Increment the number of threads suspended.  */
 356:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 group_ptr -> tx_event_flags_group_suspended_count++;
 196              		.loc 1 356 17 is_stmt 1 view .LVU77
 197              		.loc 1 356 27 is_stmt 0 view .LVU78
 198 0068 6369     		ldr	r3, [r4, #20]
 199              		.loc 1 356 66 view .LVU79
 200 006a 0133     		adds	r3, r3, #1
 201 006c 6361     		str	r3, [r4, #20]
 357:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 358:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Set the state to suspended.  */
 359:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 202              		.loc 1 359 17 is_stmt 1 view .LVU80
 203              		.loc 1 359 47 is_stmt 0 view .LVU81
 204 006e 0723     		movs	r3, #7
 205 0070 2B63     		str	r3, [r5, #48]
 360:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 361:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #ifdef TX_NOT_INTERRUPTABLE
 362:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 363:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Call actual non-interruptable thread suspension routine.  */
 364:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 _tx_thread_system_ni_suspend(thread_ptr, wait_option);
 365:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 366:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Return the completion status.  */
 367:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 status =  thread_ptr -> tx_thread_suspend_status;
 368:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #else
 369:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 370:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Set the suspending flag.  */
 371:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspending =  TX_TRUE;
 206              		.loc 1 371 17 is_stmt 1 view .LVU82
 207              		.loc 1 371 52 is_stmt 0 view .LVU83
 208 0072 0123     		movs	r3, #1
 209 0074 AB63     		str	r3, [r5, #56]
 372:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 373:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Setup the timeout period.  */
 374:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 210              		.loc 1 374 17 is_stmt 1 view .LVU84
 211              		.loc 1 374 81 is_stmt 0 view .LVU85
 212 0076 049B     		ldr	r3, [sp, #16]
 213 0078 EB64     		str	r3, [r5, #76]
 375:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 376:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Temporarily disable preemption.  */
 377:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 _tx_thread_preempt_disable++;
 214              		.loc 1 377 17 is_stmt 1 view .LVU86
 215              		.loc 1 377 43 is_stmt 0 view .LVU87
 216 007a 194A     		ldr	r2, .L15
 217 007c 1368     		ldr	r3, [r2]
 218 007e 0133     		adds	r3, r3, #1
 219 0080 1360     		str	r3, [r2]
 378:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 379:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Restore interrupts.  */
 380:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 TX_RESTORE
 220              		.loc 1 380 17 is_stmt 1 view .LVU88
 221              	.LVL16:
 222              	.LBB20:
 223              	.LBI20:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
ARM GAS  /tmp/ccSnMjov.s 			page 22


 224              		.loc 2 568 55 view .LVU89
 225              	.LBB21:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 226              		.loc 2 574 5 view .LVU90
 227              		.syntax unified
 228              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 229 0082 8CF31088 		MSR  PRIMASK,ip
 230              	@ 0 "" 2
 231              	.LVL17:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 232              		.loc 2 574 5 is_stmt 0 view .LVU91
 233              		.thumb
 234              		.syntax unified
 235              	.LBE21:
 236              	.LBE20:
 381:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 382:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Call actual thread suspension routine.  */
 383:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 _tx_thread_system_suspend(thread_ptr);
 237              		.loc 1 383 17 is_stmt 1 view .LVU92
 238 0086 2846     		mov	r0, r5
 239 0088 FFF7FEFF 		bl	_tx_thread_system_suspend
 240              	.LVL18:
 384:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 385:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Disable interrupts.  */
 386:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 TX_DISABLE
 241              		.loc 1 386 17 view .LVU93
 242              	.LBB22:
 243              	.LBI22:
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 244              		.loc 2 578 63 view .LVU94
 245              	.LBB23:
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 246              		.loc 2 580 1 view .LVU95
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 247              		.loc 2 582 5 view .LVU96
 248              	.LBB24:
 249              	.LBI24:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 250              		.loc 2 545 63 view .LVU97
 251              	.LBB25:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 252              		.loc 2 547 1 view .LVU98
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 253              		.loc 2 551 5 view .LVU99
 254              		.syntax unified
 255              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 256 008c EFF3108C 		MRS  ip, PRIMASK 
 257              	@ 0 "" 2
 258              	.LVL19:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 259              		.loc 2 553 5 view .LVU100
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 260              		.loc 2 553 5 is_stmt 0 view .LVU101
 261              		.thumb
 262              		.syntax unified
 263              	.LBE25:
 264              	.LBE24:
ARM GAS  /tmp/ccSnMjov.s 			page 23


 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 265              		.loc 2 587 5 is_stmt 1 view .LVU102
 266              		.syntax unified
 267              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 268 0090 72B6     		CPSID i
 269              	@ 0 "" 2
 270              		.loc 2 589 5 view .LVU103
 271              	.LVL20:
 272              		.loc 2 589 5 is_stmt 0 view .LVU104
 273              		.thumb
 274              		.syntax unified
 275              	.LBE23:
 276              	.LBE22:
 387:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 388:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 /* Return the completion status.  */
 389:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 status =  thread_ptr -> tx_thread_suspend_status;
 277              		.loc 1 389 17 is_stmt 1 view .LVU105
 278              		.loc 1 389 24 is_stmt 0 view .LVU106
 279 0092 D5F88400 		ldr	r0, [r5, #132]
 280              	.LVL21:
 281              		.loc 1 389 24 view .LVU107
 282 0096 1CE0     		b	.L6
 283              	.LVL22:
 284              	.L3:
 218:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 285              		.loc 1 218 9 is_stmt 1 view .LVU108
 218:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 286              		.loc 1 218 25 is_stmt 0 view .LVU109
 287 0098 00EA0106 		and	r6, r0, r1
 288              	.LVL23:
 289              	.L5:
 222:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 290              		.loc 1 222 5 is_stmt 1 view .LVU110
 222:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     {
 291              		.loc 1 222 8 is_stmt 0 view .LVU111
 292 009c 002E     		cmp	r6, #0
 293 009e C6D0     		beq	.L4
 228:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 294              		.loc 1 228 9 is_stmt 1 view .LVU112
 295              	.LVL24:
 231:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 296              		.loc 1 231 9 view .LVU113
 231:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 297              		.loc 1 231 12 is_stmt 0 view .LVU114
 298 00a0 12F00100 		ands	r0, r2, #1
 299              	.LVL25:
 231:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 300              		.loc 1 231 12 view .LVU115
 301 00a4 15D0     		beq	.L6
 235:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 302              		.loc 1 235 13 is_stmt 1 view .LVU116
 303              	.LVL26:
 239:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 304              		.loc 1 239 13 view .LVU117
 239:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 305              		.loc 1 239 27 is_stmt 0 view .LVU118
 306 00a6 6369     		ldr	r3, [r4, #20]
ARM GAS  /tmp/ccSnMjov.s 			page 24


 307              	.LVL27:
 239:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 308              		.loc 1 239 16 view .LVU119
 309 00a8 0BB1     		cbz	r3, .L7
 242:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 {
 310              		.loc 1 242 17 is_stmt 1 view .LVU120
 242:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 {
 311              		.loc 1 242 31 is_stmt 0 view .LVU121
 312 00aa 2369     		ldr	r3, [r4, #16]
 242:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 {
 313              		.loc 1 242 20 view .LVU122
 314 00ac 2BB1     		cbz	r3, .L14
 315              	.L7:
 316              	.LVL28:
 265:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_current & ~requested_flag
 317              		.loc 1 265 17 is_stmt 1 view .LVU123
 266:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 318              		.loc 1 266 51 is_stmt 0 view .LVU124
 319 00ae A368     		ldr	r3, [r4, #8]
 266:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 320              		.loc 1 266 83 view .LVU125
 321 00b0 23EA0103 		bic	r3, r3, r1
 265:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_current & ~requested_flag
 322              		.loc 1 265 59 view .LVU126
 323 00b4 A360     		str	r3, [r4, #8]
 271:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 324              		.loc 1 271 16 view .LVU127
 325 00b6 0020     		movs	r0, #0
 326              	.LVL29:
 271:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 327              		.loc 1 271 16 view .LVU128
 328 00b8 0BE0     		b	.L6
 329              	.LVL30:
 330              	.L14:
 246:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 }
 331              		.loc 1 246 21 is_stmt 1 view .LVU129
 251:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             {
 332              		.loc 1 251 13 view .LVU130
 258:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_delayed_clear | requested
 333              		.loc 1 258 17 view .LVU131
 259:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 334              		.loc 1 259 89 is_stmt 0 view .LVU132
 335 00ba 0D43     		orrs	r5, r5, r1
 336              	.LVL31:
 258:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_delayed_clear | requested
 337              		.loc 1 258 65 view .LVU133
 338 00bc 2562     		str	r5, [r4, #32]
 339              	.LVL32:
 271:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 340              		.loc 1 271 16 view .LVU134
 341 00be 0020     		movs	r0, #0
 342              	.LVL33:
 271:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 343              		.loc 1 271 16 view .LVU135
 344 00c0 07E0     		b	.L6
 345              	.LVL34:
 346              	.L8:
ARM GAS  /tmp/ccSnMjov.s 			page 25


 347:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 347              		.loc 1 347 21 is_stmt 1 view .LVU136
 347:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 348              		.loc 1 347 33 is_stmt 0 view .LVU137
 349 00c2 2369     		ldr	r3, [r4, #16]
 350              	.LVL35:
 348:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
 351              		.loc 1 348 21 is_stmt 1 view .LVU138
 348:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
 352              		.loc 1 348 60 is_stmt 0 view .LVU139
 353 00c4 2B67     		str	r3, [r5, #112]
 354              	.LVL36:
 349:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 355              		.loc 1 349 21 is_stmt 1 view .LVU140
 349:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 356              		.loc 1 349 37 is_stmt 0 view .LVU141
 357 00c6 5A6F     		ldr	r2, [r3, #116]
 358              	.LVL37:
 350:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 359              		.loc 1 350 21 is_stmt 1 view .LVU142
 350:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 360              		.loc 1 350 64 is_stmt 0 view .LVU143
 361 00c8 6A67     		str	r2, [r5, #116]
 351:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
 362              		.loc 1 351 21 is_stmt 1 view .LVU144
 351:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
 363              		.loc 1 351 65 is_stmt 0 view .LVU145
 364 00ca 1567     		str	r5, [r2, #112]
 365              	.LVL38:
 352:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 }
 366              		.loc 1 352 21 is_stmt 1 view .LVU146
 352:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****                 }
 367              		.loc 1 352 65 is_stmt 0 view .LVU147
 368 00cc 5D67     		str	r5, [r3, #116]
 369 00ce CBE7     		b	.L9
 370              	.LVL39:
 371              	.L10:
 390:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** #endif
 391:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 392:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 393:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         else
 394:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         {
 395:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 396:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             /* Immediate return, return error completion.  */
 397:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             status =  TX_NO_EVENTS;
 372              		.loc 1 397 20 view .LVU148
 373 00d0 0720     		movs	r0, #7
 374              	.LVL40:
 375              	.L6:
 398:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****         }
 399:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     }
 400:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 401:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Restore interrupts.  */
 402:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     TX_RESTORE
 376              		.loc 1 402 5 is_stmt 1 view .LVU149
 377              	.LBB26:
 378              	.LBI26:
ARM GAS  /tmp/ccSnMjov.s 			page 26


 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 379              		.loc 2 568 55 view .LVU150
 380              	.LBB27:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 381              		.loc 2 574 5 view .LVU151
 382              		.syntax unified
 383              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 384 00d2 8CF31088 		MSR  PRIMASK,ip
 385              	@ 0 "" 2
 386              	.LVL41:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 387              		.loc 2 574 5 is_stmt 0 view .LVU152
 388              		.thumb
 389              		.syntax unified
 390              	.LBE27:
 391              	.LBE26:
 403:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** 
 404:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     /* Return completion status.  */
 405:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****     return(status);
 392              		.loc 1 405 5 is_stmt 1 view .LVU153
 406:Middlewares/ST/threadx/common/src/tx_event_flags_get.c **** }
 393              		.loc 1 406 1 is_stmt 0 view .LVU154
 394 00d6 70BD     		pop	{r4, r5, r6, pc}
 395              	.LVL42:
 396              	.L11:
 288:Middlewares/ST/threadx/common/src/tx_event_flags_get.c ****             }
 397              		.loc 1 288 24 view .LVU155
 398 00d8 0720     		movs	r0, #7
 399 00da FAE7     		b	.L6
 400              	.L12:
 401 00dc 0720     		movs	r0, #7
 402 00de F8E7     		b	.L6
 403              	.L16:
 404              		.align	2
 405              	.L15:
 406 00e0 00000000 		.word	_tx_thread_preempt_disable
 407 00e4 00000000 		.word	_tx_thread_current_ptr
 408 00e8 00000000 		.word	_tx_event_flags_cleanup
 409              		.cfi_endproc
 410              	.LFE8:
 412              		.text
 413              	.Letext0:
 414              		.file 3 "Middlewares/ST/threadx/common/inc/tx_api.h"
 415              		.file 4 "Middlewares/ST/threadx/common/inc/tx_thread.h"
 416              		.file 5 "Middlewares/ST/threadx/common/inc/tx_event_flags.h"
ARM GAS  /tmp/ccSnMjov.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 tx_event_flags_get.c
     /tmp/ccSnMjov.s:20     .text._tx_event_flags_get:00000000 $t
     /tmp/ccSnMjov.s:26     .text._tx_event_flags_get:00000000 _tx_event_flags_get
     /tmp/ccSnMjov.s:406    .text._tx_event_flags_get:000000e0 $d

UNDEFINED SYMBOLS
_tx_thread_system_suspend
_tx_thread_preempt_disable
_tx_thread_current_ptr
_tx_event_flags_cleanup
