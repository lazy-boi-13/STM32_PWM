ARM GAS  /tmp/ccKDqV4Q.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"tx_queue_receive.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Middlewares/ST/threadx/common/src/tx_queue_receive.c"
  19              		.section	.text._tx_queue_receive,"ax",%progbits
  20              		.align	1
  21              		.global	_tx_queue_receive
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_tx_queue_receive:
  27              	.LVL0:
  28              	.LFB8:
   1:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /**************************************************************************/
   2:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
   3:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
   5:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  10:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /**************************************************************************/
  11:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
  12:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
  13:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /**************************************************************************/
  14:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /**************************************************************************/
  15:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /**                                                                       */
  16:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /**                                                                       */
  18:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /**   Queue                                                               */
  19:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /**                                                                       */
  20:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /**************************************************************************/
  21:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /**************************************************************************/
  22:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
  23:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #define TX_SOURCE_CODE
  24:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
  25:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
  26:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /* Include necessary system files.  */
  27:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
  28:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #include "tx_api.h"
  29:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #include "tx_trace.h"
  30:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #include "tx_thread.h"
ARM GAS  /tmp/ccKDqV4Q.s 			page 2


  31:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #include "tx_queue.h"
  32:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
  33:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
  34:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /**************************************************************************/
  35:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  36:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*  FUNCTION                                               RELEASE        */
  37:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  38:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    _tx_queue_receive                                   PORTABLE C      */
  39:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                           6.1          */
  40:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*  AUTHOR                                                                */
  41:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  42:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  44:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*  DESCRIPTION                                                           */
  45:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  46:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    This function receives a message from the specified queue. If there */
  47:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    are no messages in the queue, this function waits according to the  */
  48:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    option specified.                                                   */
  49:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  50:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*  INPUT                                                                 */
  51:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  52:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    queue_ptr                         Pointer to queue control block    */
  53:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    destination_ptr                   Pointer to message destination    */
  54:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                        **** MUST BE LARGE ENOUGH TO    */
  55:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                             HOLD MESSAGE ****          */
  56:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    wait_option                       Suspension option                 */
  57:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  58:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*  OUTPUT                                                                */
  59:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  60:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    status                            Completion status                 */
  61:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  62:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*  CALLS                                                                 */
  63:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  64:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    _tx_thread_system_resume          Resume thread routine             */
  65:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    _tx_thread_system_ni_resume       Non-interruptable resume thread   */
  66:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    _tx_thread_system_suspend         Suspend thread routine            */
  67:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    _tx_thread_system_ni_suspend      Non-interruptable suspend thread  */
  68:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  69:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*  CALLED BY                                                             */
  70:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  71:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    Application Code                                                    */
  72:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  73:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*  RELEASE HISTORY                                                       */
  74:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  75:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*    DATE              NAME                      DESCRIPTION             */
  76:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  77:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  78:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  79:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                            resulting in version 6.1    */
  80:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /*                                                                        */
  81:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** /**************************************************************************/
  82:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
  83:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** {
  29              		.loc 1 83 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccKDqV4Q.s 			page 3


  33              		.loc 1 83 1 is_stmt 0 view .LVU1
  34 0000 70B5     		push	{r4, r5, r6, lr}
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 0446     		mov	r4, r0
  84:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
  85:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** TX_INTERRUPT_SAVE_AREA
  41              		.loc 1 85 1 is_stmt 1 view .LVU2
  86:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
  87:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** TX_THREAD       *thread_ptr;
  42              		.loc 1 87 1 view .LVU3
  88:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** ULONG           *source;
  43              		.loc 1 88 1 view .LVU4
  89:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** ULONG           *destination;
  44              		.loc 1 89 1 view .LVU5
  90:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** UINT            size;
  45              		.loc 1 90 1 view .LVU6
  91:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** UINT            suspended_count;
  46              		.loc 1 91 1 view .LVU7
  92:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** TX_THREAD       *next_thread;
  47              		.loc 1 92 1 view .LVU8
  93:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** TX_THREAD       *previous_thread;
  48              		.loc 1 93 1 view .LVU9
  94:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** UINT            status;
  49              		.loc 1 94 1 view .LVU10
  95:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
  96:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
  97:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     /* Default the status to TX_SUCCESS.  */
  98:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     status =  TX_SUCCESS;
  50              		.loc 1 98 5 view .LVU11
  51              	.LVL1:
  99:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 100:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     /* Disable interrupts to receive message from queue.  */
 101:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     TX_DISABLE
  52              		.loc 1 101 5 view .LVU12
  53              	.LBB20:
  54              	.LBI20:
  55              		.file 2 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h"
   1:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
   2:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   3:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
   5:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  10:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  11:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  12:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  13:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  14:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  15:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  16:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
ARM GAS  /tmp/ccKDqV4Q.s 			page 4


  17:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  18:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**                                                                       */
  20:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  21:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  22:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  23:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  24:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  25:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  26:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  28:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M7/GNU     */
  29:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                           6.1.12       */
  30:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  31:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  33:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  35:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  37:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  46:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  49:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  51:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  53:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  04-25-2022      Scott Larson            Modified comments and added   */
  60:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            volatile to registers,      */
  61:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.11 */
  62:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*  07-29-2022      Scott Larson            Modified comments and         */
  63:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            described BASEPRI usage,    */
  64:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.12 */
  65:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*                                                                        */
  66:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /**************************************************************************/
  67:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  68:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  69:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_H
  70:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  71:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  72:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  73:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccKDqV4Q.s 			page 5


  74:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  75:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  76:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  77:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  78:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  79:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_user.h"
  80:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  81:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  82:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  83:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  84:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  85:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <stdlib.h>
  86:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <string.h>
  87:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  88:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  89:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  90:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  91:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  92:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <yvals.h>
  93:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  94:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  95:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
  96:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
  97:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  98:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  99:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 100:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 101:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 102:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
 103:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
 104:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
 105:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 106:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 107:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef __GNUC__
 108:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 109:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 110:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 111:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 112:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 113:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define VOID                                    void
 114:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 115:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 116:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef int                                     INT;
 117:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 118:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef long                                    LONG;
 119:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 120:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 121:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 122:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 123:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 124:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 125:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 126:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 127:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 128:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 129:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 130:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccKDqV4Q.s 			page 6


 131:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 132:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 133:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 134:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 135:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 136:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 137:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 138:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 139:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 140:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 141:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 142:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 143:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 144:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 145:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 146:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 147:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 148:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 149:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 150:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 151:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 152:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* By default, ThreadX for Cortex-M uses the PRIMASK register to enable/disable interrupts.
 153:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** If using BASEPRI is desired, define the following two symbols for both c and assembly files:
 154:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_USE_BASEPRI - This tells ThreadX to use BASEPRI instead of PRIMASK.
 155:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** TX_PORT_BASEPRI = (priority_mask << (8 - number_priority_bits)) - this defines the maximum priority
 156:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** Any interrupt with a higher priority than priority_mask will not be masked, thus the interrupt will
 157:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 158:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 159:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 160:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 161:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 162:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 163:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 164:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 165:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 166:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 167:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    source constants would be:
 168:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 169:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0x0a800024)
 170:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 171:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 172:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** */
 173:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 174:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 175:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 176:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0xE0001004)
 177:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 178:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 179:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 180:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 181:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 182:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 183:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 184:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 185:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 186:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 187:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ghs__
ARM GAS  /tmp/ccKDqV4Q.s 			page 7


 188:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 189:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 190:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 191:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 192:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 193:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 194:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 195:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 196:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 197:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 198:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 199:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 200:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 201:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 202:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 203:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 204:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 205:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 206:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 207:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 208:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 209:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 210:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    a function call.  */
 211:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 212:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 213:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 214:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 215:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 216:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 217:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 218:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 219:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 220:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 221:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 222:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 223:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    logic.  */
 224:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 225:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 226:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 227:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 228:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 229:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 230:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 231:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 232:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 233:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 234:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 235:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 236:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 237:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 238:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 239:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 240:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 241:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 242:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 243:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 244:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
ARM GAS  /tmp/ccKDqV4Q.s 			page 8


 245:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 246:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 247:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 248:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 249:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 250:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 251:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 252:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 253:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 254:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 255:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 256:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 257:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 258:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 259:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 260:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 261:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 262:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 263:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 264:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 265:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 266:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 267:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 268:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 269:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 270:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 271:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 272:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 273:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 274:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 275:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 276:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 277:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 278:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 279:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 280:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 281:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 282:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 283:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 284:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 285:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 286:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 287:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 288:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 289:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 290:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 291:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 292:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 293:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 294:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 295:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 296:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 297:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 298:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 299:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 300:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 301:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
ARM GAS  /tmp/ccKDqV4Q.s 			page 9


 302:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 303:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 304:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 305:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 306:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 307:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 308:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 309:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 310:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 311:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 312:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 313:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 314:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 315:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 316:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 317:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 318:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 319:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 320:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 321:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 322:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 323:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 324:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 325:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 326:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 327:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 328:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 329:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 330:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG  control_value;
 331:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 332:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 333:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(control_value);
 334:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 335:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 336:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 337:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 338:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 339:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 340:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 341:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 342:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 343:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 344:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 345:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 346:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 347:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 348:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 349:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 350:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 351:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 352:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 353:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 354:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 355:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 356:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 357:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 358:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
ARM GAS  /tmp/ccKDqV4Q.s 			page 10


 359:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 360:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 361:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 362:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 363:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 364:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 365:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 366:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 367:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 368:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 369:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 370:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 371:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 372:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 373:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 374:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 375:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 376:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 377:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 378:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 379:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 380:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 381:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 382:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 383:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 384:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 385:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 386:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 387:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 388:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 389:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 390:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 391:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 392:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 393:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((volatile ULONG *) 0xE00
 394:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 395:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 396:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 397:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 398:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 399:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 400:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 401:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 402:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 403:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 404:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 405:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 406:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 407:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 408:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 409:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 410:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 411:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 412:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 413:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 414:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 415:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
ARM GAS  /tmp/ccKDqV4Q.s 			page 11


 416:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 417:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 418:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 419:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 420:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 421:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 422:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         else                                       
 423:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         {                                          
 424:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 425:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 426:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 427:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 428:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             {                                      
 429:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 430:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 431:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 432:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 433:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 434:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 {                                  
 435:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 436:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 437:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 438:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                                 }                                  
 439:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                             }                                      
 440:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                         }                                          
 441:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                     }
 442:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 443:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 444:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 445:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 446:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 447:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 448:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 449:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 450:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 451:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 452:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 453:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 454:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 455:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 456:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 457:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 458:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 459:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 460:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 461:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 462:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 463:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 464:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 465:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 466:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 467:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 468:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 469:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 470:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 471:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 472:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccKDqV4Q.s 			page 12


 473:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 474:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 475:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 476:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 477:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 478:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 479:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 480:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 481:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 482:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 483:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 484:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 485:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 486:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 487:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 488:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 489:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 490:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(ipsr_value);
 491:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 492:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 493:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 494:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 495:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 496:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 497:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 498:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 499:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 500:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 501:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 502:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 503:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 504:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 505:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 506:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 507:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 508:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 509:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 510:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 511:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 512:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 513:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 514:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 515:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 516:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 517:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 518:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 519:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 520:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 521:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 522:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 523:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 524:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 525:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 526:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 527:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 528:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 529:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
ARM GAS  /tmp/ccKDqV4Q.s 			page 13


 530:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 531:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 532:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 533:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 534:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 535:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 536:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 537:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 538:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 539:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 540:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 541:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 542:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 543:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 544:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 546:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int posture;
 548:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 549:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 550:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 552:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(posture);
 554:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 555:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 556:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 557:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 558:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 559:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 560:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 561:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 562:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 563:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 564:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 565:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 566:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 567:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 569:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 570:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 571:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 572:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 573:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 575:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 576:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
 577:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 578:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  56              		.loc 2 578 63 view .LVU13
  57              	.LBB21:
 579:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 580:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** unsigned int int_posture;
  58              		.loc 2 580 1 view .LVU14
 581:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 582:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  59              		.loc 2 582 5 view .LVU15
ARM GAS  /tmp/ccKDqV4Q.s 			page 14


  60              	.LBB22:
  61              	.LBI22:
 545:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
  62              		.loc 2 545 63 view .LVU16
  63              	.LBB23:
 547:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  64              		.loc 2 547 1 view .LVU17
 551:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
  65              		.loc 2 551 5 view .LVU18
  66              		.syntax unified
  67              	@ 551 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  68 0004 EFF3108C 		MRS  ip, PRIMASK 
  69              	@ 0 "" 2
  70              	.LVL2:
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  71              		.loc 2 553 5 view .LVU19
 553:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** }
  72              		.loc 2 553 5 is_stmt 0 view .LVU20
  73              		.thumb
  74              		.syntax unified
  75              	.LBE23:
  76              	.LBE22:
 583:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** 
 584:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 585:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 586:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #else
 587:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  77              		.loc 2 587 5 is_stmt 1 view .LVU21
  78              		.syntax unified
  79              	@ 587 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
  80 0008 72B6     		CPSID i
  81              	@ 0 "" 2
 588:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 589:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h ****     return(int_posture);
  82              		.loc 2 589 5 view .LVU22
  83              	.LVL3:
  84              		.loc 2 589 5 is_stmt 0 view .LVU23
  85              		.thumb
  86              		.syntax unified
  87              	.LBE21:
  88              	.LBE20:
 102:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 103:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #ifdef TX_QUEUE_ENABLE_PERFORMANCE_INFO
 104:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 105:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     /* Increment the total messages received counter.  */
 106:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     _tx_queue_performance__messages_received_count++;
 107:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 108:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     /* Increment the number of messages received from this queue.  */
 109:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     queue_ptr -> tx_queue_performance_messages_received_count++;
 110:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 111:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 112:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 113:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 114:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_RECEIVE, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(destinat
 115:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 116:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     /* Log this kernel call.  */
 117:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     TX_EL_QUEUE_RECEIVE_INSERT
ARM GAS  /tmp/ccKDqV4Q.s 			page 15


 118:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 119:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     /* Pickup the thread suspension count.  */
 120:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     suspended_count =  queue_ptr -> tx_queue_suspended_count;
  89              		.loc 1 120 5 is_stmt 1 view .LVU24
  90              		.loc 1 120 21 is_stmt 0 view .LVU25
  91 000a C06A     		ldr	r0, [r0, #44]
  92              	.LVL4:
 121:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 122:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     /* Determine if there is anything in the queue.  */
 123:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
  93              		.loc 1 123 5 is_stmt 1 view .LVU26
  94              		.loc 1 123 19 is_stmt 0 view .LVU27
  95 000c 2369     		ldr	r3, [r4, #16]
  96              		.loc 1 123 8 view .LVU28
  97 000e 002B     		cmp	r3, #0
  98 0010 00F09A80 		beq	.L2
 124:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     {
 125:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 126:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         /* Determine if there are any suspensions.  */
 127:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         if (suspended_count == TX_NO_SUSPENSIONS)
  99              		.loc 1 127 9 is_stmt 1 view .LVU29
 100              		.loc 1 127 12 is_stmt 0 view .LVU30
 101 0014 E8B9     		cbnz	r0, .L3
 128:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         {
 129:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 130:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* There is a message waiting in the queue and there are no suspensi.  */
 131:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 132:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Setup source and destination pointers.  */
 133:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             source =       queue_ptr -> tx_queue_read;
 102              		.loc 1 133 13 is_stmt 1 view .LVU31
 103              	.LVL5:
 134:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 104              		.loc 1 134 13 view .LVU32
 135:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             size =         queue_ptr -> tx_queue_message_size;
 105              		.loc 1 135 13 view .LVU33
 106              		.loc 1 135 18 is_stmt 0 view .LVU34
 107 0016 A268     		ldr	r2, [r4, #8]
 108              	.LVL6:
 136:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 137:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Copy message. Note that the source and destination pointers are
 138:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                incremented by the macro.  */
 139:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             TX_QUEUE_MESSAGE_COPY(source, destination, size)
 109              		.loc 1 139 13 is_stmt 1 view .LVU35
 110 0018 236A     		ldr	r3, [r4, #32]
 111              	.LVL7:
 112              		.loc 1 139 13 is_stmt 0 view .LVU36
 113 001a 53F8045B 		ldr	r5, [r3], #4
 114              	.LVL8:
 115              		.loc 1 139 13 view .LVU37
 116 001e 41F8045B 		str	r5, [r1], #4
 117              	.LVL9:
 118              		.loc 1 139 13 is_stmt 1 view .LVU38
 119 0022 012A     		cmp	r2, #1
 120 0024 04D8     		bhi	.L4
 121 0026 05E0     		b	.L5
 122              	.LVL10:
 123              	.L6:
ARM GAS  /tmp/ccKDqV4Q.s 			page 16


 124              		.loc 1 139 13 discriminator 3 view .LVU39
 125              		.loc 1 139 13 is_stmt 0 discriminator 3 view .LVU40
 126 0028 53F8045B 		ldr	r5, [r3], #4
 127              	.LVL11:
 128              		.loc 1 139 13 discriminator 3 view .LVU41
 129 002c 41F8045B 		str	r5, [r1], #4
 130              	.LVL12:
 131              	.L4:
 132              		.loc 1 139 13 is_stmt 1 discriminator 2 view .LVU42
 133              		.loc 1 139 13 is_stmt 0 discriminator 2 view .LVU43
 134 0030 013A     		subs	r2, r2, #1
 135              	.LVL13:
 136              		.loc 1 139 13 discriminator 2 view .LVU44
 137 0032 F9D1     		bne	.L6
 138              	.L5:
 140:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 141:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Determine if we are at the end.  */
 142:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             if (source == queue_ptr -> tx_queue_end)
 139              		.loc 1 142 13 is_stmt 1 view .LVU45
 140              		.loc 1 142 37 is_stmt 0 view .LVU46
 141 0034 E269     		ldr	r2, [r4, #28]
 142              	.LVL14:
 143              		.loc 1 142 16 view .LVU47
 144 0036 9A42     		cmp	r2, r3
 145 0038 09D0     		beq	.L30
 146              	.L7:
 143:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             {
 144:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 145:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Yes, wrap around to the beginning.  */
 146:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 source =  queue_ptr -> tx_queue_start;
 147:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             }
 148:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 149:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Setup the queue read pointer.   */
 150:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             queue_ptr -> tx_queue_read =  source;
 147              		.loc 1 150 13 is_stmt 1 view .LVU48
 148              		.loc 1 150 40 is_stmt 0 view .LVU49
 149 003a 2362     		str	r3, [r4, #32]
 151:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 152:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Increase the amount of available storage.  */
 153:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             queue_ptr -> tx_queue_available_storage++;
 150              		.loc 1 153 13 is_stmt 1 view .LVU50
 151              		.loc 1 153 23 is_stmt 0 view .LVU51
 152 003c 6369     		ldr	r3, [r4, #20]
 153              	.LVL15:
 154              		.loc 1 153 52 view .LVU52
 155 003e 0133     		adds	r3, r3, #1
 156 0040 6361     		str	r3, [r4, #20]
 154:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 155:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Decrease the enqueued count.  */
 156:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             queue_ptr -> tx_queue_enqueued--;
 157              		.loc 1 156 13 is_stmt 1 view .LVU53
 158              		.loc 1 156 23 is_stmt 0 view .LVU54
 159 0042 2369     		ldr	r3, [r4, #16]
 160              		.loc 1 156 43 view .LVU55
 161 0044 013B     		subs	r3, r3, #1
 162 0046 2361     		str	r3, [r4, #16]
 157:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
ARM GAS  /tmp/ccKDqV4Q.s 			page 17


 158:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Restore interrupts.  */
 159:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             TX_RESTORE
 163              		.loc 1 159 13 is_stmt 1 view .LVU56
 164              	.LVL16:
 165              	.LBB24:
 166              	.LBI24:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 167              		.loc 2 568 55 view .LVU57
 168              	.LBB25:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 169              		.loc 2 574 5 view .LVU58
 170              		.syntax unified
 171              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 172 0048 8CF31088 		MSR  PRIMASK,ip
 173              	@ 0 "" 2
 174              	.LVL17:
 175              		.thumb
 176              		.syntax unified
 177              	.L1:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 178              		.loc 2 574 5 is_stmt 0 view .LVU59
 179              	.LBE25:
 180              	.LBE24:
 160:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         }
 161:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         else
 162:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         {
 163:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 164:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* At this point we know the queue is full.  */
 165:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 166:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Pickup thread suspension list head pointer.  */
 167:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 168:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 169:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Now determine if there is a queue front suspension active.   */
 170:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 171:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Is the front suspension flag set?  */
 172:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 173:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             {
 174:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 175:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Yes, a queue front suspension is present.  */
 176:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 177:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Return the message associated with this suspension.  */
 178:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 179:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Setup source and destination pointers.  */
 180:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_
 181:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 182:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 size =         queue_ptr -> tx_queue_message_size;
 183:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 184:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Copy message. Note that the source and destination pointers are
 185:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                    incremented by the macro.  */
 186:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 TX_QUEUE_MESSAGE_COPY(source, destination, size)
 187:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 188:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Message is now in the caller's destination. See if this is the only suspended th
 189:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                    on the list.  */
 190:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 suspended_count--;
 191:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 if (suspended_count == TX_NO_SUSPENSIONS)
 192:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 193:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
ARM GAS  /tmp/ccKDqV4Q.s 			page 18


 194:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     /* Yes, the only suspended thread.  */
 195:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 196:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     /* Update the head pointer.  */
 197:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 198:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 199:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 else
 200:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 201:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 202:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     /* At least one more thread is on the same expiration list.  */
 203:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 204:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     /* Update the list head pointer.  */
 205:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     next_thread =                            thread_ptr -> tx_thread_suspended_next
 206:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     queue_ptr -> tx_queue_suspension_list =  next_thread;
 207:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 208:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     /* Update the links of the adjacent threads.  */
 209:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     previous_thread =                              thread_ptr -> tx_thread_suspende
 210:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     next_thread -> tx_thread_suspended_previous =  previous_thread;
 211:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     previous_thread -> tx_thread_suspended_next =  next_thread;
 212:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 213:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 214:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Decrement the suspension count.  */
 215:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 queue_ptr -> tx_queue_suspended_count =  suspended_count;
 216:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 217:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Prepare for resumption of the first thread.  */
 218:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 219:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Clear cleanup routine to avoid timeout.  */
 220:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 221:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 222:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Put return status into the thread control block.  */
 223:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 224:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 225:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #ifdef TX_NOT_INTERRUPTABLE
 226:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 227:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Resume the thread!  */
 228:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 _tx_thread_system_ni_resume(thread_ptr);
 229:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 230:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Restore interrupts.  */
 231:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 TX_RESTORE
 232:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #else
 233:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 234:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Temporarily disable preemption.  */
 235:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 _tx_thread_preempt_disable++;
 236:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 237:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Restore interrupts.  */
 238:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 TX_RESTORE
 239:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 240:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Resume thread.  */
 241:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 _tx_thread_system_resume(thread_ptr);
 242:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 243:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             }
 244:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             else
 245:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             {
 246:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 247:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* At this point, we know that the queue is full and there
 248:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                    are one or more threads suspended trying to send another
 249:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                    message to this queue.  */
 250:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
ARM GAS  /tmp/ccKDqV4Q.s 			page 19


 251:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Setup source and destination pointers.  */
 252:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 source =       queue_ptr -> tx_queue_read;
 253:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 254:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 size =         queue_ptr -> tx_queue_message_size;
 255:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 256:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Copy message. Note that the source and destination pointers are
 257:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                    incremented by the macro.  */
 258:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 TX_QUEUE_MESSAGE_COPY(source, destination, size)
 259:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 260:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Determine if we are at the end.  */
 261:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 if (source == queue_ptr -> tx_queue_end)
 262:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 263:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 264:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     /* Yes, wrap around to the beginning.  */
 265:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     source =  queue_ptr -> tx_queue_start;
 266:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 267:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 268:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Setup the queue read pointer.   */
 269:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 queue_ptr -> tx_queue_read =  source;
 270:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 271:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Disable preemption.  */
 272:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 _tx_thread_preempt_disable++;
 273:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 274:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #ifdef TX_NOT_INTERRUPTABLE
 275:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 276:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Restore interrupts.  */
 277:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 TX_RESTORE
 278:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 279:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Interrupts are enabled briefly here to keep the interrupt
 280:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                    lockout time deterministic.  */
 281:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 282:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Disable interrupts again.  */
 283:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 TX_DISABLE
 284:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 285:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 286:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Decrement the preemption disable variable.  */
 287:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 _tx_thread_preempt_disable--;
 288:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 289:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Setup source and destination pointers.  */
 290:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_
 291:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 destination =  queue_ptr -> tx_queue_write;
 292:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 size =         queue_ptr -> tx_queue_message_size;
 293:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 294:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Copy message. Note that the source and destination pointers are
 295:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                    incremented by the macro.  */
 296:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 TX_QUEUE_MESSAGE_COPY(source, destination, size)
 297:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 298:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Determine if we are at the end.  */
 299:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 if (destination == queue_ptr -> tx_queue_end)
 300:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 301:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 302:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     /* Yes, wrap around to the beginning.  */
 303:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     destination =  queue_ptr -> tx_queue_start;
 304:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 305:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 306:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Adjust the write pointer.  */
 307:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 queue_ptr -> tx_queue_write =  destination;
ARM GAS  /tmp/ccKDqV4Q.s 			page 20


 308:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 309:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Pickup thread pointer.  */
 310:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 311:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 312:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Message is now in the queue.  See if this is the only suspended thread
 313:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                    on the list.  */
 314:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 suspended_count--;
 315:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 if (suspended_count == TX_NO_SUSPENSIONS)
 316:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 317:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 318:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                   /* Yes, the only suspended thread.  */
 319:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 320:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     /* Update the head pointer.  */
 321:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 322:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 323:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 else
 324:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 325:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 326:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     /* At least one more thread is on the same expiration list.  */
 327:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 328:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     /* Update the list head pointer.  */
 329:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     next_thread =                            thread_ptr -> tx_thread_suspended_next
 330:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     queue_ptr -> tx_queue_suspension_list =  next_thread;
 331:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 332:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     /* Update the links of the adjacent threads.  */
 333:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     previous_thread =                               thread_ptr -> tx_thread_suspend
 334:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     next_thread -> tx_thread_suspended_previous =   previous_thread;
 335:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     previous_thread -> tx_thread_suspended_next =   next_thread;
 336:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 337:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 338:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Decrement the suspension count.  */
 339:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 queue_ptr -> tx_queue_suspended_count =  suspended_count;
 340:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 341:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Prepare for resumption of the first thread.  */
 342:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 343:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Clear cleanup routine to avoid timeout.  */
 344:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 345:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 346:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Put return status into the thread control block.  */
 347:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 348:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 349:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #ifdef TX_NOT_INTERRUPTABLE
 350:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 351:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Resume the thread!  */
 352:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 _tx_thread_system_ni_resume(thread_ptr);
 353:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 354:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Restore interrupts.  */
 355:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 TX_RESTORE
 356:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #else
 357:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 358:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Temporarily disable preemption.  */
 359:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 _tx_thread_preempt_disable++;
 360:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 361:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Restore interrupts.  */
 362:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 TX_RESTORE
 363:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 364:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* Resume thread.  */
ARM GAS  /tmp/ccKDqV4Q.s 			page 21


 365:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 _tx_thread_system_resume(thread_ptr);
 366:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 367:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             }
 368:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         }
 369:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     }
 370:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 371:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     /* Determine if the request specifies suspension.  */
 372:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     else if (wait_option != TX_NO_WAIT)
 373:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     {
 374:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 375:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         /* Determine if the preempt disable flag is non-zero.  */
 376:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         if (_tx_thread_preempt_disable != ((UINT) 0))
 377:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         {
 378:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 379:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Restore interrupts.  */
 380:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             TX_RESTORE
 381:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 382:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Suspension is not allowed if the preempt disable flag is non-zero at this point - re
 383:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             status =  TX_QUEUE_EMPTY;
 384:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         }
 385:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         else
 386:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         {
 387:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 388:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Prepare for suspension of this thread.  */
 389:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 390:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #ifdef TX_QUEUE_ENABLE_PERFORMANCE_INFO
 391:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 392:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Increment the total queue empty suspensions counter.  */
 393:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             _tx_queue_performance_empty_suspension_count++;
 394:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 395:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Increment the number of empty suspensions on this queue.  */
 396:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             queue_ptr -> tx_queue_performance_empty_suspension_count++;
 397:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 398:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 399:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Pickup thread pointer.  */
 400:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             TX_THREAD_GET_CURRENT(thread_ptr)
 401:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 402:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Setup cleanup routine pointer.  */
 403:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 404:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 405:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Setup cleanup information, i.e. this queue control
 406:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                block and the source pointer.  */
 407:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 408:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 409:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 410:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 411:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #ifndef TX_NOT_INTERRUPTABLE
 412:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 413:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Increment the suspension sequence number, which is used to identify
 414:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                this suspension event.  */
 415:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr -> tx_thread_suspension_sequence++;
 416:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 417:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 418:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Setup suspension list.  */
 419:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             if (suspended_count == TX_NO_SUSPENSIONS)
 420:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             {
 421:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
ARM GAS  /tmp/ccKDqV4Q.s 			page 22


 422:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* No other threads are suspended.  Setup the head pointer and
 423:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                    just setup this threads pointers to itself.  */
 424:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 425:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 426:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 427:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             }
 428:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             else
 429:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             {
 430:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 431:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 /* This list is not NULL, add current thread to the end. */
 432:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 next_thread =                                   queue_ptr -> tx_queue_suspension_li
 433:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspended_next =        next_thread;
 434:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 previous_thread =                               next_thread -> tx_thread_suspended_
 435:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 436:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 previous_thread -> tx_thread_suspended_next =   thread_ptr;
 437:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 next_thread -> tx_thread_suspended_previous =   thread_ptr;
 438:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             }
 439:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 440:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Increment the suspended thread count.  */
 441:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 442:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 443:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Set the state to suspended.  */
 444:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 445:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 446:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #ifdef TX_NOT_INTERRUPTABLE
 447:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 448:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Call actual non-interruptable thread suspension routine.  */
 449:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             _tx_thread_system_ni_suspend(thread_ptr, wait_option);
 450:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 451:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Restore interrupts.  */
 452:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             TX_RESTORE
 453:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #else
 454:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 455:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Set the suspending flag.  */
 456:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr -> tx_thread_suspending =  TX_TRUE;
 457:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 458:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Setup the timeout period.  */
 459:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 460:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 461:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Temporarily disable preemption.  */
 462:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             _tx_thread_preempt_disable++;
 463:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 464:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Restore interrupts.  */
 465:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             TX_RESTORE
 466:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 467:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Call actual thread suspension routine.  */
 468:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             _tx_thread_system_suspend(thread_ptr);
 469:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 470:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 471:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             /* Return the completion status.  */
 472:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             status =  thread_ptr -> tx_thread_suspend_status;
 473:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         }
 474:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     }
 475:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     else
 476:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     {
 477:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 478:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         /* Restore interrupts.  */
ARM GAS  /tmp/ccKDqV4Q.s 			page 23


 479:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         TX_RESTORE
 480:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 481:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         /* Immediate return, return error completion.  */
 482:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         status =  TX_QUEUE_EMPTY;
 483:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     }
 484:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 485:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     /* Return completion status.  */
 486:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     return(status);
 487:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** }
 181              		.loc 1 487 1 view .LVU60
 182 004c 70BD     		pop	{r4, r5, r6, pc}
 183              	.LVL18:
 184              	.L30:
 146:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             }
 185              		.loc 1 146 17 is_stmt 1 view .LVU61
 146:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             }
 186              		.loc 1 146 24 is_stmt 0 view .LVU62
 187 004e A369     		ldr	r3, [r4, #24]
 188              	.LVL19:
 146:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             }
 189              		.loc 1 146 24 view .LVU63
 190 0050 F3E7     		b	.L7
 191              	.LVL20:
 192              	.L3:
 167:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 193              		.loc 1 167 13 is_stmt 1 view .LVU64
 167:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 194              		.loc 1 167 24 is_stmt 0 view .LVU65
 195 0052 A56A     		ldr	r5, [r4, #40]
 196              	.LVL21:
 172:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             {
 197              		.loc 1 172 13 is_stmt 1 view .LVU66
 172:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             {
 198              		.loc 1 172 28 is_stmt 0 view .LVU67
 199 0054 D5F88030 		ldr	r3, [r5, #128]
 172:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             {
 200              		.loc 1 172 16 view .LVU68
 201 0058 012B     		cmp	r3, #1
 202 005a 08D0     		beq	.L31
 252:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 203              		.loc 1 252 17 is_stmt 1 view .LVU69
 204              	.LVL22:
 253:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 size =         queue_ptr -> tx_queue_message_size;
 205              		.loc 1 253 17 view .LVU70
 254:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 206              		.loc 1 254 17 view .LVU71
 254:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 207              		.loc 1 254 22 is_stmt 0 view .LVU72
 208 005c A268     		ldr	r2, [r4, #8]
 209              	.LVL23:
 258:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 210              		.loc 1 258 17 is_stmt 1 view .LVU73
 211 005e 236A     		ldr	r3, [r4, #32]
 212              	.LVL24:
 258:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 213              		.loc 1 258 17 is_stmt 0 view .LVU74
 214 0060 53F8046B 		ldr	r6, [r3], #4
ARM GAS  /tmp/ccKDqV4Q.s 			page 24


 215              	.LVL25:
 258:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 216              		.loc 1 258 17 view .LVU75
 217 0064 41F8046B 		str	r6, [r1], #4
 218              	.LVL26:
 258:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 219              		.loc 1 258 17 is_stmt 1 view .LVU76
 220 0068 012A     		cmp	r2, #1
 221 006a 2DD8     		bhi	.L15
 222 006c 2EE0     		b	.L16
 223              	.LVL27:
 224              	.L31:
 180:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 225              		.loc 1 180 17 view .LVU77
 181:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 size =         queue_ptr -> tx_queue_message_size;
 226              		.loc 1 181 17 view .LVU78
 182:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 227              		.loc 1 182 17 view .LVU79
 182:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 228              		.loc 1 182 22 is_stmt 0 view .LVU80
 229 006e A268     		ldr	r2, [r4, #8]
 230              	.LVL28:
 186:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 231              		.loc 1 186 17 is_stmt 1 view .LVU81
 232 0070 EB6F     		ldr	r3, [r5, #124]
 233              	.LVL29:
 186:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 234              		.loc 1 186 17 is_stmt 0 view .LVU82
 235 0072 53F8046B 		ldr	r6, [r3], #4
 236              	.LVL30:
 186:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 237              		.loc 1 186 17 view .LVU83
 238 0076 41F8046B 		str	r6, [r1], #4
 239              	.LVL31:
 186:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 240              		.loc 1 186 17 is_stmt 1 view .LVU84
 241 007a 012A     		cmp	r2, #1
 242 007c 04D8     		bhi	.L10
 243 007e 05E0     		b	.L11
 244              	.LVL32:
 245              	.L12:
 186:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 246              		.loc 1 186 17 discriminator 3 view .LVU85
 186:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 247              		.loc 1 186 17 is_stmt 0 discriminator 3 view .LVU86
 248 0080 53F8046B 		ldr	r6, [r3], #4
 249              	.LVL33:
 186:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 250              		.loc 1 186 17 discriminator 3 view .LVU87
 251 0084 41F8046B 		str	r6, [r1], #4
 252              	.LVL34:
 253              	.L10:
 186:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 254              		.loc 1 186 17 is_stmt 1 discriminator 2 view .LVU88
 186:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 255              		.loc 1 186 17 is_stmt 0 discriminator 2 view .LVU89
 256 0088 013A     		subs	r2, r2, #1
ARM GAS  /tmp/ccKDqV4Q.s 			page 25


 257              	.LVL35:
 186:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 258              		.loc 1 186 17 discriminator 2 view .LVU90
 259 008a F9D1     		bne	.L12
 260              	.L11:
 190:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 if (suspended_count == TX_NO_SUSPENSIONS)
 261              		.loc 1 190 17 is_stmt 1 view .LVU91
 262              	.LVL36:
 191:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 263              		.loc 1 191 17 view .LVU92
 191:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 264              		.loc 1 191 20 is_stmt 0 view .LVU93
 265 008c 0138     		subs	r0, r0, #1
 266              	.LVL37:
 191:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 267              		.loc 1 191 20 view .LVU94
 268 008e 11D1     		bne	.L13
 197:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 269              		.loc 1 197 21 is_stmt 1 view .LVU95
 197:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 270              		.loc 1 197 59 is_stmt 0 view .LVU96
 271 0090 0023     		movs	r3, #0
 272              	.LVL38:
 197:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 273              		.loc 1 197 59 view .LVU97
 274 0092 A362     		str	r3, [r4, #40]
 275              	.LVL39:
 276              	.L14:
 215:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 277              		.loc 1 215 17 is_stmt 1 view .LVU98
 215:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 278              		.loc 1 215 55 is_stmt 0 view .LVU99
 279 0094 E062     		str	r0, [r4, #44]
 220:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 280              		.loc 1 220 17 is_stmt 1 view .LVU100
 220:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 281              		.loc 1 220 57 is_stmt 0 view .LVU101
 282 0096 0024     		movs	r4, #0
 283              	.LVL40:
 220:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 284              		.loc 1 220 57 view .LVU102
 285 0098 AC66     		str	r4, [r5, #104]
 223:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 286              		.loc 1 223 17 is_stmt 1 view .LVU103
 223:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 287              		.loc 1 223 56 is_stmt 0 view .LVU104
 288 009a C5F88440 		str	r4, [r5, #132]
 235:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 289              		.loc 1 235 17 is_stmt 1 view .LVU105
 235:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 290              		.loc 1 235 43 is_stmt 0 view .LVU106
 291 009e 474A     		ldr	r2, .L35
 292 00a0 1368     		ldr	r3, [r2]
 293 00a2 0133     		adds	r3, r3, #1
 294 00a4 1360     		str	r3, [r2]
 238:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 295              		.loc 1 238 17 is_stmt 1 view .LVU107
ARM GAS  /tmp/ccKDqV4Q.s 			page 26


 296              	.LVL41:
 297              	.LBB26:
 298              	.LBI26:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 299              		.loc 2 568 55 view .LVU108
 300              	.LBB27:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 301              		.loc 2 574 5 view .LVU109
 302              		.syntax unified
 303              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 304 00a6 8CF31088 		MSR  PRIMASK,ip
 305              	@ 0 "" 2
 306              	.LVL42:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 307              		.loc 2 574 5 is_stmt 0 view .LVU110
 308              		.thumb
 309              		.syntax unified
 310              	.LBE27:
 311              	.LBE26:
 241:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 312              		.loc 1 241 17 is_stmt 1 view .LVU111
 313 00aa 2846     		mov	r0, r5
 314              	.LVL43:
 241:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 315              		.loc 1 241 17 is_stmt 0 view .LVU112
 316 00ac FFF7FEFF 		bl	_tx_thread_system_resume
 317              	.LVL44:
  98:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 318              		.loc 1 98 12 view .LVU113
 319 00b0 2046     		mov	r0, r4
 320 00b2 CBE7     		b	.L1
 321              	.LVL45:
 322              	.L13:
 205:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     queue_ptr -> tx_queue_suspension_list =  next_thread;
 323              		.loc 1 205 21 is_stmt 1 view .LVU114
 205:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     queue_ptr -> tx_queue_suspension_list =  next_thread;
 324              		.loc 1 205 33 is_stmt 0 view .LVU115
 325 00b4 2B6F     		ldr	r3, [r5, #112]
 326              	.LVL46:
 206:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 327              		.loc 1 206 21 is_stmt 1 view .LVU116
 206:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 328              		.loc 1 206 59 is_stmt 0 view .LVU117
 329 00b6 A362     		str	r3, [r4, #40]
 209:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     next_thread -> tx_thread_suspended_previous =  previous_thread;
 330              		.loc 1 209 21 is_stmt 1 view .LVU118
 209:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     next_thread -> tx_thread_suspended_previous =  previous_thread;
 331              		.loc 1 209 37 is_stmt 0 view .LVU119
 332 00b8 6A6F     		ldr	r2, [r5, #116]
 333              	.LVL47:
 210:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     previous_thread -> tx_thread_suspended_next =  next_thread;
 334              		.loc 1 210 21 is_stmt 1 view .LVU120
 210:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     previous_thread -> tx_thread_suspended_next =  next_thread;
 335              		.loc 1 210 65 is_stmt 0 view .LVU121
 336 00ba 5A67     		str	r2, [r3, #116]
 211:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 337              		.loc 1 211 21 is_stmt 1 view .LVU122
ARM GAS  /tmp/ccKDqV4Q.s 			page 27


 211:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 338              		.loc 1 211 65 is_stmt 0 view .LVU123
 339 00bc 1367     		str	r3, [r2, #112]
 340 00be E9E7     		b	.L14
 341              	.LVL48:
 342              	.L17:
 258:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 343              		.loc 1 258 17 is_stmt 1 discriminator 3 view .LVU124
 258:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 344              		.loc 1 258 17 is_stmt 0 discriminator 3 view .LVU125
 345 00c0 53F8046B 		ldr	r6, [r3], #4
 346              	.LVL49:
 258:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 347              		.loc 1 258 17 discriminator 3 view .LVU126
 348 00c4 41F8046B 		str	r6, [r1], #4
 349              	.LVL50:
 350              	.L15:
 258:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 351              		.loc 1 258 17 is_stmt 1 discriminator 2 view .LVU127
 258:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 352              		.loc 1 258 17 is_stmt 0 discriminator 2 view .LVU128
 353 00c8 013A     		subs	r2, r2, #1
 354              	.LVL51:
 258:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 355              		.loc 1 258 17 discriminator 2 view .LVU129
 356 00ca F9D1     		bne	.L17
 357              	.L16:
 261:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 358              		.loc 1 261 17 is_stmt 1 view .LVU130
 261:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 359              		.loc 1 261 41 is_stmt 0 view .LVU131
 360 00cc E269     		ldr	r2, [r4, #28]
 361              	.LVL52:
 261:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 362              		.loc 1 261 20 view .LVU132
 363 00ce 9A42     		cmp	r2, r3
 364 00d0 11D0     		beq	.L32
 365              	.L18:
 269:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 366              		.loc 1 269 17 is_stmt 1 view .LVU133
 269:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 367              		.loc 1 269 44 is_stmt 0 view .LVU134
 368 00d2 2362     		str	r3, [r4, #32]
 272:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 369              		.loc 1 272 17 is_stmt 1 view .LVU135
 272:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 370              		.loc 1 272 43 is_stmt 0 view .LVU136
 371 00d4 394B     		ldr	r3, .L35
 372              	.LVL53:
 272:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 373              		.loc 1 272 43 view .LVU137
 374 00d6 1A68     		ldr	r2, [r3]
 375 00d8 0132     		adds	r2, r2, #1
 376 00da 1A60     		str	r2, [r3]
 287:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 377              		.loc 1 287 17 is_stmt 1 view .LVU138
 287:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
ARM GAS  /tmp/ccKDqV4Q.s 			page 28


 378              		.loc 1 287 43 is_stmt 0 view .LVU139
 379 00dc 1A68     		ldr	r2, [r3]
 380 00de 013A     		subs	r2, r2, #1
 381 00e0 1A60     		str	r2, [r3]
 290:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 destination =  queue_ptr -> tx_queue_write;
 382              		.loc 1 290 17 is_stmt 1 view .LVU140
 383              	.LVL54:
 291:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 size =         queue_ptr -> tx_queue_message_size;
 384              		.loc 1 291 17 view .LVU141
 292:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 385              		.loc 1 292 17 view .LVU142
 292:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 386              		.loc 1 292 22 is_stmt 0 view .LVU143
 387 00e2 A168     		ldr	r1, [r4, #8]
 388              	.LVL55:
 296:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 389              		.loc 1 296 17 is_stmt 1 view .LVU144
 390 00e4 EA6F     		ldr	r2, [r5, #124]
 391              	.LVL56:
 296:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 392              		.loc 1 296 17 is_stmt 0 view .LVU145
 393 00e6 636A     		ldr	r3, [r4, #36]
 394              	.LVL57:
 296:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 395              		.loc 1 296 17 view .LVU146
 396 00e8 52F8045B 		ldr	r5, [r2], #4
 397              	.LVL58:
 296:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 398              		.loc 1 296 17 view .LVU147
 399 00ec 43F8045B 		str	r5, [r3], #4
 400              	.LVL59:
 296:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 401              		.loc 1 296 17 is_stmt 1 view .LVU148
 402 00f0 0129     		cmp	r1, #1
 403 00f2 06D8     		bhi	.L19
 404 00f4 07E0     		b	.L20
 405              	.LVL60:
 406              	.L32:
 265:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 407              		.loc 1 265 21 view .LVU149
 265:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 408              		.loc 1 265 28 is_stmt 0 view .LVU150
 409 00f6 A369     		ldr	r3, [r4, #24]
 410              	.LVL61:
 265:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 411              		.loc 1 265 28 view .LVU151
 412 00f8 EBE7     		b	.L18
 413              	.LVL62:
 414              	.L21:
 296:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 415              		.loc 1 296 17 is_stmt 1 discriminator 3 view .LVU152
 296:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 416              		.loc 1 296 17 is_stmt 0 discriminator 3 view .LVU153
 417 00fa 52F8045B 		ldr	r5, [r2], #4
 418              	.LVL63:
 296:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 419              		.loc 1 296 17 discriminator 3 view .LVU154
ARM GAS  /tmp/ccKDqV4Q.s 			page 29


 420 00fe 43F8045B 		str	r5, [r3], #4
 421              	.LVL64:
 422              	.L19:
 296:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 423              		.loc 1 296 17 is_stmt 1 discriminator 2 view .LVU155
 296:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 424              		.loc 1 296 17 is_stmt 0 discriminator 2 view .LVU156
 425 0102 0139     		subs	r1, r1, #1
 426              	.LVL65:
 296:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 427              		.loc 1 296 17 discriminator 2 view .LVU157
 428 0104 F9D1     		bne	.L21
 429              	.L20:
 299:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 430              		.loc 1 299 17 is_stmt 1 view .LVU158
 299:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 431              		.loc 1 299 46 is_stmt 0 view .LVU159
 432 0106 E269     		ldr	r2, [r4, #28]
 433              	.LVL66:
 299:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 434              		.loc 1 299 20 view .LVU160
 435 0108 9A42     		cmp	r2, r3
 436 010a 15D0     		beq	.L33
 437              	.L22:
 307:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 438              		.loc 1 307 17 is_stmt 1 view .LVU161
 307:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 439              		.loc 1 307 45 is_stmt 0 view .LVU162
 440 010c 6362     		str	r3, [r4, #36]
 310:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 441              		.loc 1 310 17 is_stmt 1 view .LVU163
 310:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 442              		.loc 1 310 28 is_stmt 0 view .LVU164
 443 010e A36A     		ldr	r3, [r4, #40]
 444              	.LVL67:
 314:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 if (suspended_count == TX_NO_SUSPENSIONS)
 445              		.loc 1 314 17 is_stmt 1 view .LVU165
 315:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 446              		.loc 1 315 17 view .LVU166
 315:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 447              		.loc 1 315 20 is_stmt 0 view .LVU167
 448 0110 0138     		subs	r0, r0, #1
 449              	.LVL68:
 315:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 {
 450              		.loc 1 315 20 view .LVU168
 451 0112 13D1     		bne	.L23
 321:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 452              		.loc 1 321 21 is_stmt 1 view .LVU169
 321:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 453              		.loc 1 321 59 is_stmt 0 view .LVU170
 454 0114 0022     		movs	r2, #0
 455 0116 A262     		str	r2, [r4, #40]
 456              	.LVL69:
 457              	.L24:
 339:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 458              		.loc 1 339 17 is_stmt 1 view .LVU171
 339:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
ARM GAS  /tmp/ccKDqV4Q.s 			page 30


 459              		.loc 1 339 55 is_stmt 0 view .LVU172
 460 0118 E062     		str	r0, [r4, #44]
 344:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 461              		.loc 1 344 17 is_stmt 1 view .LVU173
 344:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 462              		.loc 1 344 57 is_stmt 0 view .LVU174
 463 011a 0024     		movs	r4, #0
 464              	.LVL70:
 344:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 465              		.loc 1 344 57 view .LVU175
 466 011c 9C66     		str	r4, [r3, #104]
 347:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 467              		.loc 1 347 17 is_stmt 1 view .LVU176
 347:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 468              		.loc 1 347 56 is_stmt 0 view .LVU177
 469 011e C3F88440 		str	r4, [r3, #132]
 359:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 470              		.loc 1 359 17 is_stmt 1 view .LVU178
 359:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 471              		.loc 1 359 43 is_stmt 0 view .LVU179
 472 0122 2649     		ldr	r1, .L35
 473 0124 0A68     		ldr	r2, [r1]
 474 0126 0132     		adds	r2, r2, #1
 475 0128 0A60     		str	r2, [r1]
 362:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 476              		.loc 1 362 17 is_stmt 1 view .LVU180
 477              	.LVL71:
 478              	.LBB28:
 479              	.LBI28:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 480              		.loc 2 568 55 view .LVU181
 481              	.LBB29:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 482              		.loc 2 574 5 view .LVU182
 483              		.syntax unified
 484              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 485 012a 8CF31088 		MSR  PRIMASK,ip
 486              	@ 0 "" 2
 487              	.LVL72:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 488              		.loc 2 574 5 is_stmt 0 view .LVU183
 489              		.thumb
 490              		.syntax unified
 491              	.LBE29:
 492              	.LBE28:
 365:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 493              		.loc 1 365 17 is_stmt 1 view .LVU184
 494 012e 1846     		mov	r0, r3
 495              	.LVL73:
 365:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 496              		.loc 1 365 17 is_stmt 0 view .LVU185
 497 0130 FFF7FEFF 		bl	_tx_thread_system_resume
 498              	.LVL74:
  98:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 499              		.loc 1 98 12 view .LVU186
 500 0134 2046     		mov	r0, r4
 501 0136 89E7     		b	.L1
ARM GAS  /tmp/ccKDqV4Q.s 			page 31


 502              	.LVL75:
 503              	.L33:
 303:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 504              		.loc 1 303 21 is_stmt 1 view .LVU187
 303:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 505              		.loc 1 303 33 is_stmt 0 view .LVU188
 506 0138 A369     		ldr	r3, [r4, #24]
 507              	.LVL76:
 303:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 508              		.loc 1 303 33 view .LVU189
 509 013a E7E7     		b	.L22
 510              	.LVL77:
 511              	.L23:
 329:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     queue_ptr -> tx_queue_suspension_list =  next_thread;
 512              		.loc 1 329 21 is_stmt 1 view .LVU190
 329:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     queue_ptr -> tx_queue_suspension_list =  next_thread;
 513              		.loc 1 329 33 is_stmt 0 view .LVU191
 514 013c 1A6F     		ldr	r2, [r3, #112]
 515              	.LVL78:
 330:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 516              		.loc 1 330 21 is_stmt 1 view .LVU192
 330:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 517              		.loc 1 330 59 is_stmt 0 view .LVU193
 518 013e A262     		str	r2, [r4, #40]
 333:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     next_thread -> tx_thread_suspended_previous =   previous_thread;
 519              		.loc 1 333 21 is_stmt 1 view .LVU194
 333:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     next_thread -> tx_thread_suspended_previous =   previous_thread;
 520              		.loc 1 333 37 is_stmt 0 view .LVU195
 521 0140 596F     		ldr	r1, [r3, #116]
 522              	.LVL79:
 334:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     previous_thread -> tx_thread_suspended_next =   next_thread;
 523              		.loc 1 334 21 is_stmt 1 view .LVU196
 334:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                     previous_thread -> tx_thread_suspended_next =   next_thread;
 524              		.loc 1 334 65 is_stmt 0 view .LVU197
 525 0142 5167     		str	r1, [r2, #116]
 526              	.LVL80:
 335:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 527              		.loc 1 335 21 is_stmt 1 view .LVU198
 335:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 }
 528              		.loc 1 335 65 is_stmt 0 view .LVU199
 529 0144 0A67     		str	r2, [r1, #112]
 530 0146 E7E7     		b	.L24
 531              	.LVL81:
 532              	.L2:
 372:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     {
 533              		.loc 1 372 10 is_stmt 1 view .LVU200
 372:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     {
 534              		.loc 1 372 13 is_stmt 0 view .LVU201
 535 0148 002A     		cmp	r2, #0
 536 014a 32D0     		beq	.L25
 376:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         {
 537              		.loc 1 376 9 is_stmt 1 view .LVU202
 376:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         {
 538              		.loc 1 376 40 is_stmt 0 view .LVU203
 539 014c 1B4B     		ldr	r3, .L35
 540 014e 1B68     		ldr	r3, [r3]
 376:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         {
ARM GAS  /tmp/ccKDqV4Q.s 			page 32


 541              		.loc 1 376 12 view .LVU204
 542 0150 23BB     		cbnz	r3, .L34
 400:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 543              		.loc 1 400 13 is_stmt 1 view .LVU205
 544 0152 1B4B     		ldr	r3, .L35+4
 545 0154 1D68     		ldr	r5, [r3]
 546              	.LVL82:
 403:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 547              		.loc 1 403 13 view .LVU206
 403:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 548              		.loc 1 403 53 is_stmt 0 view .LVU207
 549 0156 1B4B     		ldr	r3, .L35+8
 550 0158 AB66     		str	r3, [r5, #104]
 407:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 551              		.loc 1 407 13 is_stmt 1 view .LVU208
 407:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 552              		.loc 1 407 59 is_stmt 0 view .LVU209
 553 015a EC66     		str	r4, [r5, #108]
 408:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 554              		.loc 1 408 13 is_stmt 1 view .LVU210
 408:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 555              		.loc 1 408 61 is_stmt 0 view .LVU211
 556 015c E967     		str	r1, [r5, #124]
 409:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 557              		.loc 1 409 13 is_stmt 1 view .LVU212
 409:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 558              		.loc 1 409 52 is_stmt 0 view .LVU213
 559 015e 0023     		movs	r3, #0
 560 0160 C5F88030 		str	r3, [r5, #128]
 415:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 561              		.loc 1 415 13 is_stmt 1 view .LVU214
 415:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 562              		.loc 1 415 24 is_stmt 0 view .LVU215
 563 0164 D5F8AC30 		ldr	r3, [r5, #172]
 415:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 564              		.loc 1 415 56 view .LVU216
 565 0168 0133     		adds	r3, r3, #1
 566 016a C5F8AC30 		str	r3, [r5, #172]
 419:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             {
 567              		.loc 1 419 13 is_stmt 1 view .LVU217
 419:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             {
 568              		.loc 1 419 16 is_stmt 0 view .LVU218
 569 016e C8B9     		cbnz	r0, .L27
 424:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 570              		.loc 1 424 17 is_stmt 1 view .LVU219
 424:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 571              		.loc 1 424 55 is_stmt 0 view .LVU220
 572 0170 A562     		str	r5, [r4, #40]
 425:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 573              		.loc 1 425 17 is_stmt 1 view .LVU221
 425:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 574              		.loc 1 425 56 is_stmt 0 view .LVU222
 575 0172 2D67     		str	r5, [r5, #112]
 426:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             }
 576              		.loc 1 426 17 is_stmt 1 view .LVU223
 426:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             }
 577              		.loc 1 426 60 is_stmt 0 view .LVU224
ARM GAS  /tmp/ccKDqV4Q.s 			page 33


 578 0174 6D67     		str	r5, [r5, #116]
 579              	.LVL83:
 580              	.L28:
 441:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 581              		.loc 1 441 13 is_stmt 1 view .LVU225
 441:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 582              		.loc 1 441 70 is_stmt 0 view .LVU226
 583 0176 0130     		adds	r0, r0, #1
 584              	.LVL84:
 441:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 585              		.loc 1 441 51 view .LVU227
 586 0178 E062     		str	r0, [r4, #44]
 444:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 587              		.loc 1 444 13 is_stmt 1 view .LVU228
 444:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 588              		.loc 1 444 43 is_stmt 0 view .LVU229
 589 017a 0523     		movs	r3, #5
 590 017c 2B63     		str	r3, [r5, #48]
 456:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 591              		.loc 1 456 13 is_stmt 1 view .LVU230
 456:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 592              		.loc 1 456 48 is_stmt 0 view .LVU231
 593 017e 0123     		movs	r3, #1
 594 0180 AB63     		str	r3, [r5, #56]
 459:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 595              		.loc 1 459 13 is_stmt 1 view .LVU232
 459:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 596              		.loc 1 459 77 is_stmt 0 view .LVU233
 597 0182 EA64     		str	r2, [r5, #76]
 462:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 598              		.loc 1 462 13 is_stmt 1 view .LVU234
 462:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 599              		.loc 1 462 39 is_stmt 0 view .LVU235
 600 0184 0D4A     		ldr	r2, .L35
 601              	.LVL85:
 462:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 602              		.loc 1 462 39 view .LVU236
 603 0186 1368     		ldr	r3, [r2]
 604 0188 0133     		adds	r3, r3, #1
 605 018a 1360     		str	r3, [r2]
 465:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 606              		.loc 1 465 13 is_stmt 1 view .LVU237
 607              	.LVL86:
 608              	.LBB30:
 609              	.LBI30:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 610              		.loc 2 568 55 view .LVU238
 611              	.LBB31:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 612              		.loc 2 574 5 view .LVU239
 613              		.syntax unified
 614              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 615 018c 8CF31088 		MSR  PRIMASK,ip
 616              	@ 0 "" 2
 617              	.LVL87:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 618              		.loc 2 574 5 is_stmt 0 view .LVU240
ARM GAS  /tmp/ccKDqV4Q.s 			page 34


 619              		.thumb
 620              		.syntax unified
 621              	.LBE31:
 622              	.LBE30:
 468:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 623              		.loc 1 468 13 is_stmt 1 view .LVU241
 624 0190 2846     		mov	r0, r5
 625              	.LVL88:
 468:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** #endif
 626              		.loc 1 468 13 is_stmt 0 view .LVU242
 627 0192 FFF7FEFF 		bl	_tx_thread_system_suspend
 628              	.LVL89:
 472:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         }
 629              		.loc 1 472 13 is_stmt 1 view .LVU243
 472:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         }
 630              		.loc 1 472 20 is_stmt 0 view .LVU244
 631 0196 D5F88400 		ldr	r0, [r5, #132]
 632              	.LVL90:
 472:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         }
 633              		.loc 1 472 20 view .LVU245
 634 019a 57E7     		b	.L1
 635              	.LVL91:
 636              	.L34:
 380:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 637              		.loc 1 380 13 is_stmt 1 view .LVU246
 638              	.LBB32:
 639              	.LBI32:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 640              		.loc 2 568 55 view .LVU247
 641              	.LBB33:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 642              		.loc 2 574 5 view .LVU248
 643              		.syntax unified
 644              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 645 019c 8CF31088 		MSR  PRIMASK,ip
 646              	@ 0 "" 2
 647              	.LVL92:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 648              		.loc 2 574 5 is_stmt 0 view .LVU249
 649              		.thumb
 650              		.syntax unified
 651              	.LBE33:
 652              	.LBE32:
 383:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         }
 653              		.loc 1 383 13 is_stmt 1 view .LVU250
 383:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         }
 654              		.loc 1 383 20 is_stmt 0 view .LVU251
 655 01a0 0A20     		movs	r0, #10
 656              	.LVL93:
 383:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****         }
 657              		.loc 1 383 20 view .LVU252
 658 01a2 53E7     		b	.L1
 659              	.LVL94:
 660              	.L27:
 432:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspended_next =        next_thread;
 661              		.loc 1 432 17 is_stmt 1 view .LVU253
 432:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspended_next =        next_thread;
ARM GAS  /tmp/ccKDqV4Q.s 			page 35


 662              		.loc 1 432 29 is_stmt 0 view .LVU254
 663 01a4 A36A     		ldr	r3, [r4, #40]
 664              	.LVL95:
 433:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 previous_thread =                               next_thread -> tx_thread_suspended_
 665              		.loc 1 433 17 is_stmt 1 view .LVU255
 433:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 previous_thread =                               next_thread -> tx_thread_suspended_
 666              		.loc 1 433 56 is_stmt 0 view .LVU256
 667 01a6 2B67     		str	r3, [r5, #112]
 434:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 668              		.loc 1 434 17 is_stmt 1 view .LVU257
 434:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 669              		.loc 1 434 33 is_stmt 0 view .LVU258
 670 01a8 596F     		ldr	r1, [r3, #116]
 671              	.LVL96:
 435:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 previous_thread -> tx_thread_suspended_next =   thread_ptr;
 672              		.loc 1 435 17 is_stmt 1 view .LVU259
 435:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 previous_thread -> tx_thread_suspended_next =   thread_ptr;
 673              		.loc 1 435 60 is_stmt 0 view .LVU260
 674 01aa 6967     		str	r1, [r5, #116]
 436:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 next_thread -> tx_thread_suspended_previous =   thread_ptr;
 675              		.loc 1 436 17 is_stmt 1 view .LVU261
 436:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****                 next_thread -> tx_thread_suspended_previous =   thread_ptr;
 676              		.loc 1 436 61 is_stmt 0 view .LVU262
 677 01ac 0D67     		str	r5, [r1, #112]
 678              	.LVL97:
 437:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             }
 679              		.loc 1 437 17 is_stmt 1 view .LVU263
 437:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****             }
 680              		.loc 1 437 61 is_stmt 0 view .LVU264
 681 01ae 5D67     		str	r5, [r3, #116]
 682 01b0 E1E7     		b	.L28
 683              	.LVL98:
 684              	.L25:
 479:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** 
 685              		.loc 1 479 9 is_stmt 1 view .LVU265
 686              	.LBB34:
 687              	.LBI34:
 568:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** {
 688              		.loc 2 568 55 view .LVU266
 689              	.LBB35:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 690              		.loc 2 574 5 view .LVU267
 691              		.syntax unified
 692              	@ 574 "Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h" 1
 693 01b2 8CF31088 		MSR  PRIMASK,ip
 694              	@ 0 "" 2
 695              	.LVL99:
 574:Middlewares/ST/threadx/ports/cortex_m7/gnu/inc/tx_port.h **** #endif
 696              		.loc 2 574 5 is_stmt 0 view .LVU268
 697              		.thumb
 698              		.syntax unified
 699              	.LBE35:
 700              	.LBE34:
 482:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     }
 701              		.loc 1 482 9 is_stmt 1 view .LVU269
 482:Middlewares/ST/threadx/common/src/tx_queue_receive.c ****     }
 702              		.loc 1 482 16 is_stmt 0 view .LVU270
ARM GAS  /tmp/ccKDqV4Q.s 			page 36


 703 01b6 0A20     		movs	r0, #10
 704              	.LVL100:
 486:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** }
 705              		.loc 1 486 5 is_stmt 1 view .LVU271
 486:Middlewares/ST/threadx/common/src/tx_queue_receive.c **** }
 706              		.loc 1 486 11 is_stmt 0 view .LVU272
 707 01b8 48E7     		b	.L1
 708              	.L36:
 709 01ba 00BF     		.align	2
 710              	.L35:
 711 01bc 00000000 		.word	_tx_thread_preempt_disable
 712 01c0 00000000 		.word	_tx_thread_current_ptr
 713 01c4 00000000 		.word	_tx_queue_cleanup
 714              		.cfi_endproc
 715              	.LFE8:
 717              		.text
 718              	.Letext0:
 719              		.file 3 "Middlewares/ST/threadx/common/inc/tx_api.h"
 720              		.file 4 "Middlewares/ST/threadx/common/inc/tx_thread.h"
 721              		.file 5 "Middlewares/ST/threadx/common/inc/tx_queue.h"
ARM GAS  /tmp/ccKDqV4Q.s 			page 37


DEFINED SYMBOLS
                            *ABS*:00000000 tx_queue_receive.c
     /tmp/ccKDqV4Q.s:20     .text._tx_queue_receive:00000000 $t
     /tmp/ccKDqV4Q.s:26     .text._tx_queue_receive:00000000 _tx_queue_receive
     /tmp/ccKDqV4Q.s:711    .text._tx_queue_receive:000001bc $d

UNDEFINED SYMBOLS
_tx_thread_system_resume
_tx_thread_system_suspend
_tx_thread_preempt_disable
_tx_thread_current_ptr
_tx_queue_cleanup
